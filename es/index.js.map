{"version":3,"file":"index.js","sources":["../node_modules/tslib/tslib.es6.js","../src/twitch.ts","../src/utils/logger/create-logger.ts","../src/Client/client-types.ts","../src/Client/utils/parsers/client-parser-helpers.ts","../src/Client/utils/parsers/client-parsers.ts","../src/Client/utils/client-sanitizers.ts","../src/Chat/chat-types.ts","../src/Client/client.ts","../src/Client/utils/client-validators.ts","../src/Client/client-constants.ts","../src/Client/utils/client-utils.ts","../src/Chat/chat-constants.ts","../src/Chat/utils/parsers/chat-parser-helpers.ts","../src/Chat/utils/parsers/chat-parser-tags.ts","../src/Chat/utils/parsers/chat-parsers.ts","../src/Chat/utils/chat-utils.ts","../src/Chat/utils/chat-sanitizers.ts","../src/Chat/utils/chat-validators.ts","../src/utils/error.ts","../src/Chat/chat-errors.ts","../src/Api/api-types.ts","../src/Chat/chat.ts","../src/utils/fetch/fetch.ts","../src/Api/utils/api-validators.ts","../src/Api/api.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","type DistributeKeys<T> = { [P in keyof T]: P }\n\n/**\n * Validate response\n * @see https://dev.twitch.tv/docs/authentication#validating-requests\n */\nexport type ApiValidateResponse = {\n  client_id: string\n  login: string\n  scopes: string[]\n  user_id: string\n  expires_in: number\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/guide#twitch-irc-capabilities\n */\nexport enum Capabilities {\n  'tags' = 'twitch.tv/tags',\n  'commands' = 'twitch.tv/commands',\n  'membership' = 'twitch.tv/membership',\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/membership\n */\nexport enum MembershipCommands {\n  JOIN = 'JOIN',\n  MODE = 'MODE',\n  PART = 'PART',\n  NAMES = '353',\n  NAMES_END = '366',\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/tags\n */\nexport enum TagCommands {\n  CLEAR_CHAT = 'CLEARCHAT',\n  GLOBALUSERSTATE = 'GLOBALUSERSTATE',\n  PRIVATE_MESSAGE = 'PRIVMSG',\n  ROOM_STATE = 'ROOMSTATE',\n  USER_NOTICE = 'USERNOTICE',\n  USER_STATE = 'USERSTATE',\n}\n\nexport enum OtherCommands {\n  WELCOME = '001',\n  PING = 'PING',\n  PONG = 'PONG',\n  WHISPER = 'WHISPER',\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/commands\n */\nexport enum BaseCommands {\n  CLEAR_CHAT = 'CLEARCHAT',\n  CLEAR_MESSAGE = 'CLEARMSG',\n  HOST_TARGET = 'HOSTTARGET',\n  NOTICE = 'NOTICE',\n  RECONNECT = 'RECONNECT',\n  ROOM_STATE = 'ROOMSTATE',\n  USER_NOTICE = 'USERNOTICE',\n  USER_STATE = 'USERSTATE',\n}\n\nexport enum Commands {\n  WELCOME = '001',\n\n  PING = 'PING',\n  PONG = 'PONG',\n  RECONNECT = 'RECONNECT',\n\n  WHISPER = 'PRIVMSG #jtv',\n\n  JOIN = 'JOIN',\n  MODE = 'MODE',\n  PART = 'PART',\n  NAMES = '353',\n  NAMES_END = '366',\n\n  CLEAR_CHAT = 'CLEARCHAT',\n  CLEAR_MESSAGE = 'CLEARMSG',\n  GLOBALUSERSTATE = 'GLOBALUSERSTATE',\n  HOST_TARGET = 'HOSTTARGET',\n  NOTICE = 'NOTICE',\n  PRIVATE_MESSAGE = 'PRIVMSG',\n  ROOM_STATE = 'ROOMSTATE',\n  USER_NOTICE = 'USERNOTICE',\n  USER_STATE = 'USERSTATE',\n}\n\nexport enum ChatEvents {\n  RAW = 'RAW',\n\n  ALL = '*',\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  RECONNECT = 'RECONNECT',\n  AUTHENTICATED = 'AUTHENTICATED',\n  AUTHENTICATION_FAILED = 'AUTHENTICATION_FAILED',\n  GLOBALUSERSTATE = 'GLOBALUSERSTATE',\n  ERROR_ENCOUNTERED = 'ERROR_ENCOUNTERED',\n  PARSE_ERROR_ENCOUNTERED = 'PARSE_ERROR_ENCOUNTERED',\n\n  ANON_GIFT_PAID_UPGRADE = 'ANON_GIFT_PAID_UPGRADE',\n  GIFT_PAID_UPGRADE = 'GIFT_PAID_UPGRADE',\n  RAID = 'RAID',\n  RESUBSCRIPTION = 'RESUBSCRIPTION',\n  RITUAL = 'RITUAL',\n  SUBSCRIPTION = 'SUBSCRIPTION',\n  SUBSCRIPTION_GIFT = 'SUBSCRIPTION_GIFT',\n  SUBSCRIPTION_GIFT_COMMUNITY = 'SUBSCRIPTION_GIFT_COMMUNITY',\n\n  ROOM_MODS = 'ROOM_MODS',\n  MOD_GAINED = 'MOD_GAINED',\n  MOD_LOST = 'MOD_LOST',\n\n  USER_BANNED = 'USER_BANNED',\n\n  CHEER = 'CHEER',\n\n  HOST_ON = 'HOST_ON',\n  HOST_OFF = 'HOST_OFF',\n\n  HOSTED = 'HOSTED',\n  HOSTED_WITHOUT_VIEWERS = 'HOSTED/WITHOUT_VIEWERS',\n  HOSTED_WITH_VIEWERS = 'HOSTED/WITH_VIEWERS',\n  HOSTED_AUTO = 'HOSTED/AUTO',\n}\n\n/**\n * @see https://help.twitch.tv/customer/en/portal/articles/659095-chat-moderation-commands\n */\nexport enum ChatCommands {\n  BAN = 'ban',\n  BLOCK = 'block',\n  CLEAR = 'clear',\n  COLOR = 'color',\n  COMMERCIAL = 'commercial',\n  // DISCONNECTED = 'disconnect',\n  DELETE = 'delete',\n  EMOTE_ONLY = 'emoteonly',\n  EMOTE_ONLY_OFF = 'emoteonlyoff',\n  FOLLOWERS_ONLY = 'followers',\n  FOLLOWERS_ONLY_OFF = 'followersoff',\n  HELP = 'help',\n  HOST = 'host',\n  MARKER = 'marker',\n  ME = 'me',\n  MOD = 'mod',\n  MODS = 'mods',\n  // PART = 'part',\n  R9K = 'r9kbeta',\n  R9K_OFF = 'r9kbetaoff',\n  RAID = 'raid',\n  SLOW = 'slow',\n  SLOW_OFF = 'slowoff',\n  SUBSCRIBERS = 'subscribers',\n  SUBSCRIBERS_OFF = 'subscribersoff',\n  TIMEOUT = 'timeout',\n  UNBAN = 'unban',\n  UNBLOCK = 'unblock',\n  UNHOST = 'unhost',\n  UNMOD = 'unmod',\n  UNRAID = 'unraid',\n  UNVIP = 'unvip',\n  VIP = 'vip',\n  VIPS = 'vips',\n  WHISPER = 'w',\n}\n\nexport enum KnownNoticeMessageIds {\n  ALREADY_BANNED = 'already_banned',\n  ALREADY_EMOTE_ONLY_OFF = 'already_emote_only_off',\n  ALREADY_EMOTE_ONLY_ON = 'already_emote_only_on',\n  ALREADY_R9K_OFF = 'already_r9k_off',\n  ALREADY_R9K_ON = 'already_r9k_on',\n  ALREADY_SUBS_OFF = 'already_subs_off',\n  ALREADY_SUBS_ON = 'already_subs_on',\n  BAD_HOST_HOSTING = 'bad_host_hosting',\n  BAD_MOD_MOD = 'bad_mod_mod',\n  BAN_SUCCESS = 'ban_success',\n  BAD_UNBAN_NO_BAN = 'bad_unban_no_ban',\n  COLOR_CHANGED = 'color_changed',\n  CMDS_AVAILABLE = 'cmds_available',\n  COMMERCIAL_SUCCESS = 'commercial_success',\n  EMOTE_ONLY_OFF = 'emote_only_off',\n  EMOTE_ONLY_ON = 'emote_only_on',\n  FOLLOWERS_OFF = 'followers_off',\n  FOLLOWERS_ON = 'followers_on',\n  FOLLOWERS_ONZERO = 'followers_onzero',\n  HOST_OFF = 'host_off',\n  HOST_ON = 'host_on',\n  HOSTS_REMAINING = 'hosts_remaining',\n  MSG_CHANNEL_SUSPENDED = 'msg_channel_suspended',\n  MOD_SUCCESS = 'mod_success',\n  NOT_HOSTING = 'not_hosting',\n  R9K_OFF = 'r9k_off',\n  R9K_ON = 'r9k_on',\n  ROOM_MODS = 'room_mods',\n  SLOW_OFF = 'slow_off',\n  SLOW_ON = 'slow_on',\n  SUBS_OFF = 'subs_off',\n  SUBS_ON = 'subs_on',\n  TIMEOUT_SUCCESS = 'timeout_success',\n  UNBAN_SUCCESS = 'unban_success',\n  UNMOD_SUCCESS = 'unmod_success',\n  UNRAID_SUCCESS = 'unraid_success',\n  UNRECOGNIZED_CMD = 'unrecognized_cmd',\n}\n\nexport const KnownNoticeMessageIdsUpperCase = Object.entries(\n  KnownNoticeMessageIds,\n).reduce(\n  (uppercase, [key, value]) => ({ ...uppercase, [key]: value.toUpperCase() }),\n  {} as Record<keyof typeof KnownNoticeMessageIds, string>,\n)\n\nexport const NoticeEvents = Object.keys(KnownNoticeMessageIds).reduce(\n  (events, event) => ({\n    ...events,\n    [event]: event,\n    [`${Commands.NOTICE}/${event.toUpperCase()}`]: event,\n  }),\n  {} as DistributeKeys<typeof KnownNoticeMessageIds>,\n)\nexport type NoticeEvents = keyof typeof NoticeEvents\n\nexport enum PrivateMessageEvents {\n  CHEER = 'CHEER',\n  HOSTED_WITHOUT_VIEWERS = 'HOSTED_WITHOUT_VIEWERS',\n  HOSTED_WITH_VIEWERS = 'HOSTED_WITH_VIEWERS',\n  HOSTED_AUTO = 'HOSTED_AUTO',\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/tags#usernotice-twitch-tags\n */\nexport enum KnownUserNoticeMessageIds {\n  ANON_GIFT_PAID_UPGRADE = 'anongiftpaidupgrade',\n  GIFT_PAID_UPGRADE = 'giftpaidupgrade',\n  RAID = 'raid',\n  RESUBSCRIPTION = 'resub',\n  RITUAL = 'ritual',\n  SUBSCRIPTION = 'sub',\n  SUBSCRIPTION_GIFT = 'subgift',\n  SUBSCRIPTION_GIFT_COMMUNITY = 'submysterygift',\n}\n\nexport const UserNoticeEvents = Object.keys(KnownUserNoticeMessageIds).reduce(\n  (events, event) => ({\n    ...events,\n    [event]: event,\n    [`${Commands.USER_NOTICE}/${event}`]: event,\n  }),\n  {} as DistributeKeys<typeof KnownUserNoticeMessageIds>,\n)\nexport type UserNoticeEvents = keyof typeof UserNoticeEvents\n\nexport const Events = {\n  ...MembershipCommands,\n  ...TagCommands,\n  ...OtherCommands,\n  ...BaseCommands,\n  ...ChatEvents,\n  ...NoticeEvents,\n  ...PrivateMessageEvents,\n  ...UserNoticeEvents,\n}\n\nexport type Events = keyof DistributeKeys<typeof Events>\n\nexport enum BooleanBadges {\n  'admin',\n  'broadcaster',\n  'globalMod',\n  'moderator',\n  'partner',\n  'premium',\n  'staff',\n  'subGifter',\n  'turbo',\n  'vip',\n}\n\nexport enum NumberBadges {\n  'bits',\n  'bitsLeader',\n  'subscriber',\n}\n\nexport type Badges =\n  | {\n      // Booleans\n      admin: boolean\n      broadcaster: boolean\n      globalMod: boolean\n      moderator: boolean\n      partner: boolean\n      premium: boolean\n      staff: boolean\n      subGifter: boolean\n      turbo: boolean\n      vip: boolean\n      // Numbers\n      bits: number\n      bitsLeader: number\n      subscriber: number\n    }\n  | {\n      [key: string]: string\n    }\n\nexport type EmoteTag = {\n  id: string\n  start: number\n  end: number\n}\n\n/**\n * Tags\n */\n\nexport interface BaseTags {\n  [key: string]: any\n}\n\n/**\n * CLEARCHAT tags\n * @see https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags\n */\nexport interface ClearChatTags extends BaseTags {\n  banReason?: string\n  banDuration?: number\n}\n\n/**\n * CLEARMSG tags\n * @see https://dev.twitch.tv/docs/irc/tags#clearmsg-twitch-tags\n */\nexport interface ClearMessageTags extends BaseTags {\n  login: string\n  targetMsgId: string\n}\n\n/**\n * GLOBALUSERSTATE tags\n * @see https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags\n */\nexport interface GlobalUserStateTags extends BaseTags {\n  emoteSets: string[]\n  userType?: string\n  username: string\n}\n\n/**\n * ROOMSTATE Tag\n * @see https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags\n */\nexport interface RoomStateTags extends BaseTags {\n  followersOnly?: number | boolean\n  broadcasterLang?: string\n  slow?: number\n  emoteOnly?: boolean\n  r9k?: boolean\n  subsOnly?: boolean\n}\n\nexport interface NoticeTags extends BaseTags {\n  msgId: KnownNoticeMessageIds\n}\n\n/**\n * USERSTATE tags\n * @see https://dev.twitch.tv/docs/irc/tags#userstate-twitch-tags\n */\nexport interface UserStateTags extends BaseTags {\n  badges: Partial<Badges>\n  color: string\n  displayName: string\n  emotes: EmoteTag[]\n  emoteSets: string[]\n  mod?: string\n  subscriber?: string\n  turbo?: string\n  userType?: string\n  username: string\n  isModerator: boolean\n}\n\n/**\n * PRIVMSG tags\n * @see https://dev.twitch.tv/docs/irc/tags#privmsg-twitch-tags\n */\nexport interface PrivateMessageTags extends UserStateTags {\n  bits?: string\n}\n\n/**\n * USERNOTICE tags\n * @see https://dev.twitch.tv/docs/irc/tags#usernotice-twitch-tags\n */\nexport interface UserNoticeTags extends UserStateTags {\n  id: string\n  login: string\n  msgId: KnownUserNoticeMessageIds\n  roomId: string\n  systemMsg: string\n  tmiSentTs: string\n}\n\nexport type Tags =\n  | ClearChatTags\n  | GlobalUserStateTags\n  | RoomStateTags\n  | UserStateTags\n  | PrivateMessageTags\n  | NoticeTags\n  | UserNoticeTags\n\n/**\n * Messages\n */\n\n/* Base message parsed from Twitch */\nexport interface Message {\n  _raw: string\n  timestamp: Date\n  channel: string\n  username: string\n  command: string\n  event: string\n  isSelf: boolean\n  message: string\n  tags: { [key: string]: any }\n  parameters?: { [key: string]: string | number | boolean }\n}\n\nexport interface BaseMessage extends Message {\n  _raw: string\n  timestamp: Date\n  channel: string\n  username: string\n  command: string\n  event: string\n  isSelf: boolean\n  message: string\n  tags: { [key: string]: any }\n}\n\n/**\n * Join a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#join-twitch-membership\n */\nexport interface JoinMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.JOIN\n  event: Commands.JOIN\n}\n\n/**\n * Depart from a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#part-twitch-membership\n */\nexport interface PartMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.PART\n  event: Commands.PART\n}\n\n/**\n * Gain/lose moderator (operator) status in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#mode-twitch-membership\n */\nexport interface ModeModGainedMessage extends BaseMessage {\n  command: Commands.MODE\n  event: ChatEvents.MOD_GAINED\n  message: '+o'\n  isModerator: true\n}\n\nexport interface ModeModLostMessage extends BaseMessage {\n  command: Commands.MODE\n  event: ChatEvents.MOD_LOST\n  message: '-o'\n  isModerator: false\n}\n\nexport type ModeMessages = ModeModGainedMessage | ModeModLostMessage\n\n/**\n * List current chatters in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n */\nexport interface NamesMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.NAMES\n  event: Commands.NAMES\n  usernames: string[]\n}\n\n/**\n * End of list current chatters in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n */\nexport interface NamesEndMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.NAMES_END\n  event: Commands.NAMES_END\n}\n\n/**\n * GLOBALUSERSTATE message\n * @see https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags\n */\nexport interface GlobalUserStateMessage extends BaseMessage {\n  command: Commands.GLOBALUSERSTATE\n  event: Commands.GLOBALUSERSTATE\n  tags: GlobalUserStateTags\n}\n\n/**\n * Temporary or permanent ban on a channel.\n * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n */\nexport interface ClearChatUserBannedMessage\n  extends Omit<BaseMessage, 'message'> {\n  command: Commands.CLEAR_CHAT\n  event: ChatEvents.USER_BANNED\n  tags: ClearChatTags\n}\n\n/**\n * All chat is cleared (deleted).\n * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n */\nexport interface ClearChatMessage\n  extends Omit<BaseMessage, 'tags' | 'username' | 'message'> {\n  command: Commands.CLEAR_CHAT\n  event: Commands.CLEAR_CHAT\n}\n\nexport type ClearChatMessages = ClearChatMessage | ClearChatUserBannedMessage\n\n/**\n * Single message removal on a channel.\n * @see https://dev.twitch.tv/docs/irc/commands#clearmsg-twitch-commands\n * @see https://dev.twitch.tv/docs/irc/tags#clearmsg-twitch-tags\n */\nexport interface ClearMessageMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.CLEAR_MESSAGE\n  event: Commands.CLEAR_MESSAGE\n  tags: ClearMessageTags\n  targetMessageId: string\n}\n\n/**\n * Host starts or stops a message.\n * @see https://dev.twitch.tv/docs/irc/commands/#hosttarget-twitch-commands\n */\nexport interface HostTargetMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.HOST_TARGET\n  event: ChatEvents.HOST_ON | ChatEvents.HOST_OFF\n  numberOfViewers?: number\n}\n\n/**\n * When a user joins a channel or a room setting is changed.\n * @see https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags\n */\nexport interface RoomStateMessage extends BaseMessage {\n  command: Commands.ROOM_STATE\n  event: Commands.ROOM_STATE\n  tags: RoomStateTags\n}\n\n/**\n * Base NOTICE message\n */\nexport interface NoticeMessage extends Omit<BaseMessage, 'event'> {\n  command: Commands.NOTICE\n  event: Exclude<NoticeEvents, typeof NoticeEvents.ROOM_MODS>\n  tags: NoticeTags\n  username: 'tmi.twitch.tv' | string\n}\n\n/**\n * NOTICE/ROOM_MODS message\n */\nexport interface NoticeRoomModsMessage extends Omit<NoticeMessage, 'event'> {\n  event: typeof NoticeEvents.ROOM_MODS\n  /** The moderators of this channel. */\n  mods: string[]\n}\n\n/**\n * NOTICE message\n * @see https://dev.twitch.tv/docs/irc/commands/#msg-id-tags-for-the-notice-commands-capability\n */\nexport type NoticeMessages = NoticeMessage | NoticeRoomModsMessage\n\n/**\n * USERSTATE message\n */\nexport interface UserStateMessage extends BaseMessage {\n  command: Commands.USER_STATE\n  event: Commands.USER_STATE\n  tags: UserStateTags\n}\n\n/**\n * PRIVMSG messages\n */\n\ninterface BasePrivateMessage\n  extends Omit<UserStateMessage, 'command' | 'event'> {\n  command: Commands.PRIVATE_MESSAGE\n}\n\n/**\n * When a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport interface PrivateMessage extends BasePrivateMessage {\n  event: Commands.PRIVATE_MESSAGE\n}\n\nexport interface PrivateMessageWithBits extends BasePrivateMessage {\n  event: ChatEvents.CHEER\n  bits: number\n}\n\ninterface BaseHostingPrivateMessage extends Omit<BasePrivateMessage, 'tags'> {}\n\n/**\n * When a user hosts your channel while connected as broadcaster.\n */\nexport interface HostingPrivateMessage extends BaseHostingPrivateMessage {\n  event: ChatEvents.HOSTED_WITHOUT_VIEWERS\n  tags: { displayName: string }\n}\n\nexport interface HostingWithViewersPrivateMessage\n  extends BaseHostingPrivateMessage {\n  event: ChatEvents.HOSTED_WITH_VIEWERS\n  tags: { displayName: string }\n  numberOfViewers?: number\n}\n\nexport interface HostingAutoPrivateMessage extends BaseHostingPrivateMessage {\n  event: ChatEvents.HOSTED_AUTO\n  tags: { displayName: string }\n  numberOfViewers?: number\n}\n\nexport type PrivateMessages =\n  | PrivateMessage\n  | PrivateMessageWithBits\n  | HostingPrivateMessage\n  | HostingWithViewersPrivateMessage\n  | HostingAutoPrivateMessage\n\nexport interface MessageParameters {\n  [key: string]: string | number | boolean | Date | undefined\n}\n\nexport interface AnonymousGiftPaidUpgradeParameters extends MessageParameters {}\n\nexport interface GiftPaidUpgradeParameters extends MessageParameters {\n  promoGiftTotal: number\n  promoName: string\n  senderLogin: string\n  senderName: string\n}\n\nexport interface RaidParameters extends MessageParameters {\n  displayName: string\n  login: string\n  viewerCount: number\n}\n\nexport interface ResubscriptionParameters extends MessageParameters {\n  months: number\n  subPlan: string\n  subPlanName: string\n}\n\nexport interface RitualParameters extends MessageParameters {\n  ritualName: string\n}\n\nexport interface SubscriptionGiftCommunityParameters extends MessageParameters {\n  massGiftCount: number\n  senderCount: number\n  subPlan: number\n}\n\nexport interface SubscriptionGiftParameters extends MessageParameters {\n  months: number\n  subPlan: string\n  subPlanName: string\n  recipientDisplayName: string\n  recipientId: string\n  recipientName: string\n}\n\nexport interface SubscriptionParameters extends MessageParameters {\n  months: 1\n  subPlan: string\n  subPlanName: string\n}\n\nexport type UserNoticeMessageParameters =\n  | AnonymousGiftPaidUpgradeParameters\n  | GiftPaidUpgradeParameters\n  | RaidParameters\n  | ResubscriptionParameters\n  | RitualParameters\n  | SubscriptionGiftCommunityParameters\n  | SubscriptionGiftParameters\n  | SubscriptionParameters\n\nexport interface UserNoticeMessage\n  extends Omit<BaseMessage, 'event' | 'parameters'> {\n  command: Commands.USER_NOTICE\n  event: UserNoticeEvents\n  tags: UserNoticeTags\n  parameters: MessageParameters\n  systemMessage: string\n}\n\n/**\n * On anonymous gifted subscription paid upgrade to a channel.\n */\nexport interface UserNoticeAnonymousGiftPaidUpgradeMessage\n  extends UserNoticeMessage {\n  command: Commands.USER_NOTICE\n  event: typeof UserNoticeEvents.ANON_GIFT_PAID_UPGRADE\n  parameters: AnonymousGiftPaidUpgradeParameters\n}\n\n/**\n * On gifted subscription paid upgrade to a channel.\n */\nexport interface UserNoticeGiftPaidUpgradeMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.GIFT_PAID_UPGRADE\n  parameters: {\n    promoGiftTotal: number\n    promoName: string\n    senderLogin: string\n    senderName: string\n  }\n}\n\n/**\n * On channel raid.\n */\nexport interface UserNoticeRaidMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.RAID\n  parameters: {\n    displayName: string\n    login: string\n    viewerCount: number\n  }\n}\n\n/**\n * On resubscription (subsequent months) to a channel.\n */\nexport interface UserNoticeResubscriptionMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.RESUBSCRIPTION\n  parameters: {\n    months: number\n    subPlan: string\n    subPlanName: string\n  }\n}\n\n/**\n * On channel ritual.\n */\nexport interface UserNoticeRitualMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.RITUAL\n  parameters: {\n    ritualName: string\n  }\n}\n\n/**\n * On subscription gift to a channel community.\n */\nexport interface UserNoticeSubscriptionGiftCommunityMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.SUBSCRIPTION_GIFT_COMMUNITY\n  parameters: {\n    massGiftCount: number\n    senderCount: number\n    subPlan: number\n  }\n}\n\n/**\n * On subscription gift to a channel.\n */\nexport interface UserNoticeSubscriptionGiftMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.SUBSCRIPTION_GIFT\n  parameters: {\n    months: number\n    subPlan: string\n    subPlanName: string\n    recipientDisplayName: string\n    recipientId: string\n    recipientName: string\n  }\n}\n\n/**\n * On subscription (first month) to a channel.\n */\nexport interface UserNoticeSubscriptionMessage\n  extends Omit<UserNoticeMessage, 'event' | 'parameters'> {\n  event: typeof UserNoticeEvents.SUBSCRIPTION\n  parameters: {\n    months: 1\n    subPlan: string\n    subPlanName: string\n  }\n}\n\nexport type UserNoticeMessages =\n  | UserNoticeAnonymousGiftPaidUpgradeMessage\n  | UserNoticeGiftPaidUpgradeMessage\n  | UserNoticeRaidMessage\n  | UserNoticeResubscriptionMessage\n  | UserNoticeRitualMessage\n  | UserNoticeSubscriptionGiftCommunityMessage\n  | UserNoticeSubscriptionGiftMessage\n  | UserNoticeSubscriptionMessage\n\nexport type Messages =\n  | BaseMessage\n  | JoinMessage\n  | PartMessage\n  | ModeMessages\n  | NamesMessage\n  | NamesEndMessage\n  | GlobalUserStateMessage\n  | ClearChatMessages\n  | ClearMessageMessage\n  | HostTargetMessage\n  | RoomStateMessage\n  | NoticeMessages\n  | UserStateMessage\n  | PrivateMessages\n  | UserNoticeMessages\n","import pino, {\n  Logger as PinoLogger,\n  LoggerOptions as PinoLoggerOptions,\n} from 'pino'\n\n/**\n * @see https://github.com/pinojs/pino/blob/v6.3.1/docs/api.md#options\n */\nexport type LoggerOptions = PinoLoggerOptions\n\nconst createLogger = (options: LoggerOptions = {}) => {\n  const { name, ...other } = options\n\n  const scope = ['TwitchJS'].concat(name || []).join('/')\n\n  const logger = pino({\n    name: scope,\n    prettyPrint: true,\n    level: 'info',\n    ...other,\n  })\n\n  const profile = (startMessage?: string) => {\n    const now = Date.now()\n\n    if (startMessage) {\n      logger.info(startMessage)\n    }\n\n    return {\n      done: (endMessage: string, error?: any) => {\n        const elapsed = Date.now() - now\n        const message = `${endMessage} (${elapsed}ms)`\n\n        if (error) {\n          logger.error(message, error)\n        } else {\n          logger.info(message)\n        }\n      },\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  logger.profile = profile\n\n  return logger as PinoLogger & { profile: typeof profile }\n}\n\nexport type Logger = ReturnType<typeof createLogger>\n\nexport default createLogger\n","import { BaseMessage, Commands } from '../twitch'\nimport { LoggerOptions } from '../utils/logger'\n\nexport type ClientOptions = {\n  username?: string\n  token?: string\n  isKnown: boolean\n  isVerified: boolean\n  server: string\n  port: number\n  ssl: boolean\n  log?: LoggerOptions\n}\n\nexport enum BaseClientEvents {\n  RAW = 'RAW',\n\n  ALL = '*',\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  RECONNECT = 'RECONNECT',\n  AUTHENTICATED = 'AUTHENTICATED',\n  AUTHENTICATION_FAILED = 'AUTHENTICATION_FAILED',\n\n  ERROR_ENCOUNTERED = 'ERROR_ENCOUNTERED',\n}\n\nexport const ClientEvents = { ...Commands, ...BaseClientEvents }\nexport type ClientEvents = Commands | BaseClientEvents\n\nexport type ClientEventTypes = {\n  [ClientEvents.RAW]: [string]\n  [ClientEvents.ALL]: [BaseMessage]\n  [ClientEvents.CONNECTED]: [BaseMessage]\n  [ClientEvents.DISCONNECTED]: []\n  [ClientEvents.RECONNECT]: []\n  [ClientEvents.AUTHENTICATED]: [BaseMessage]\n  [ClientEvents.AUTHENTICATION_FAILED]: [BaseMessage]\n  [ClientEvents.ERROR_ENCOUNTERED]: [Error]\n}\n","import toLower from 'lodash/toLower'\n\nexport const generalTimestamp = (maybeTimestamp: string) => {\n  const timestamp = new Date(parseInt(maybeTimestamp, 10))\n  return timestamp.toString() !== 'Invalid Date' ? timestamp : new Date()\n}\n\nexport const username = (...maybeUsernames: any[]): string =>\n  maybeUsernames.reduce((maybeUsername, name) => {\n    if (typeof name !== 'string') {\n      return maybeUsername\n    }\n\n    if (name === 'tmi.twitch.tv') {\n      return 'tmi.twitch.tv'\n    }\n\n    return toLower(name).split('.')[0]\n  }, undefined)\n","import { parse } from 'tekko/dist/parse'\nimport camelcaseKeys from 'camelcase-keys'\n\nimport isEmpty from 'lodash/isEmpty'\nimport toLower from 'lodash/toLower'\n\nimport { BaseMessage, Commands, Events } from '../../../twitch'\n\nimport * as helpers from './client-parser-helpers'\n\nexport const baseParser = (\n  rawMessages: string,\n  username = '',\n): BaseMessage[] => {\n  const rawMessagesArray = rawMessages.split(/\\r?\\n/g)\n\n  return rawMessagesArray.reduce((messages, rawMessage) => {\n    if (!rawMessage.length) {\n      return messages\n    }\n\n    const {\n      command,\n      tags = {},\n      prefix: { name, user, host } = {\n        name: undefined,\n        user: undefined,\n        host: undefined,\n      },\n      params: [channel, message],\n    } = parse(rawMessage)\n\n    const timestamp = String(tags['tmi-sent-ts']) || Date.now().toString()\n\n    const messageTags = isEmpty(tags)\n      ? {}\n      : (camelcaseKeys(tags) as { [key: string]: string })\n\n    const messageUsername = helpers.username(\n      host,\n      name,\n      user,\n      messageTags.login,\n      messageTags.username,\n      messageTags.displayName,\n    )\n\n    const nextMessage = {\n      _raw: rawMessage,\n      timestamp: helpers.generalTimestamp(timestamp),\n      command: command as Commands,\n      event: command as Events,\n      channel: channel !== '*' ? channel : '',\n      username: messageUsername,\n      isSelf:\n        typeof messageUsername === 'string' &&\n        toLower(username) === messageUsername,\n      tags: messageTags,\n      message,\n    }\n\n    return [...messages, nextMessage]\n  }, [] as BaseMessage[])\n}\n\nexport default baseParser\n","import isEmpty from 'lodash/isEmpty'\nimport random from 'lodash/random'\n\nimport { ANONYMOUS_USERNAME } from '../client-constants'\n\nexport const token = (value: any): string => {\n  if (value == null) {\n    return 'TWITCHJS'\n  }\n\n  if (value.startsWith('oauth:')) {\n    return value\n  }\n\n  return `oauth:${value}`\n}\n\nexport const username = (value: any): string => {\n  if (isEmpty(value) || value === 'justinfan') {\n    return `${ANONYMOUS_USERNAME}${random(80000, 81000)}`\n  }\n\n  return value\n}\n","import {\n  ClearChatMessages,\n  Events,\n  HostingAutoPrivateMessage,\n  HostingPrivateMessage,\n  HostingWithViewersPrivateMessage,\n  HostTargetMessage,\n  JoinMessage,\n  Messages,\n  ModeMessages,\n  NamesEndMessage,\n  NamesMessage,\n  NoticeMessage,\n  NoticeMessages,\n  NoticeRoomModsMessage,\n  PartMessage,\n  PrivateMessages,\n  PrivateMessageWithBits,\n  RoomStateMessage,\n  RoomStateTags,\n  UserNoticeAnonymousGiftPaidUpgradeMessage,\n  UserNoticeGiftPaidUpgradeMessage,\n  UserNoticeMessages,\n  UserNoticeRaidMessage,\n  UserNoticeResubscriptionMessage,\n  UserNoticeRitualMessage,\n  UserNoticeSubscriptionGiftCommunityMessage,\n  UserNoticeSubscriptionGiftMessage,\n  UserNoticeSubscriptionMessage,\n  UserStateMessage,\n  UserStateTags,\n} from '../twitch'\n\nimport { LoggerOptions } from '../utils/logger'\n\nimport { ClientEventTypes, BaseClientEvents } from '../Client/client-types'\n\nexport type ChatOptions = {\n  username?: string\n  /**\n   * OAuth token\n   * @see https://twitchtokengenerator.com/ to generate a token\n   */\n  token?: string\n  /**\n   * Bot is known\n   * @see https://dev.twitch.tv/docs/irc/guide/#known-and-verified-bots\n   */\n  isKnown?: boolean\n  /**\n   * Bot is verified\n   * @see https://dev.twitch.tv/docs/irc/guide/#known-and-verified-bots\n   */\n  isVerified?: boolean\n  connectionTimeout: number\n  joinTimeout: number\n  log?: LoggerOptions\n  onAuthenticationFailure?: () => Promise<string>\n}\n\nexport type ClientOptions = {\n  username?: string\n  token?: string\n  isKnown: boolean\n  isVerified: boolean\n  server: string\n  port: number\n  ssl: boolean\n  log?: LoggerOptions\n}\n\nexport enum ChatReadyStates {\n  'WAITING',\n  'CONNECTING',\n  'RECONNECTING',\n  'CONNECTED',\n  'DISCONNECTING',\n  'DISCONNECTED',\n}\n\nexport type ChannelState = {\n  roomState: RoomStateTags\n  userState?: UserStateTags\n}\n\nexport type ChannelStates = Record<string, ChannelState>\n\nexport enum NoticeCompounds {\n  ALREADY_BANNED = 'NOTICE/ALREADY_BANNED',\n  ALREADY_EMOTE_ONLY_OFF = 'NOTICE/ALREADY_EMOTE_ONLY_OFF',\n  ALREADY_EMOTE_ONLY_ON = 'NOTICE/ALREADY_EMOTE_ONLY_ON',\n  ALREADY_R9K_OFF = 'NOTICE/ALREADY_R9K_OFF',\n  ALREADY_R9K_ON = 'NOTICE/ALREADY_R9K_ON',\n  ALREADY_SUBS_OFF = 'NOTICE/ALREADY_SUBS_OFF',\n  ALREADY_SUBS_ON = 'NOTICE/ALREADY_SUBS_ON',\n  BAD_HOST_HOSTING = 'NOTICE/BAD_HOST_HOSTING',\n  BAD_MOD_MOD = 'NOTICE/BAD_MOD_MOD',\n  BAN_SUCCESS = 'NOTICE/BAN_SUCCESS',\n  BAD_UNBAN_NO_BAN = 'NOTICE/BAD_UNBAN_NO_BAN',\n  COLOR_CHANGED = 'NOTICE/COLOR_CHANGED',\n  CMDS_AVAILABLE = 'NOTICE/CMDS_AVAILABLE',\n  COMMERCIAL_SUCCESS = 'NOTICE/COMMERCIAL_SUCCESS',\n  EMOTE_ONLY_OFF = 'NOTICE/EMOTE_ONLY_OFF',\n  EMOTE_ONLY_ON = 'NOTICE/EMOTE_ONLY_ON',\n  FOLLOWERS_OFF = 'NOTICE/FOLLOWERS_OFF',\n  FOLLOWERS_ON = 'NOTICE/FOLLOWERS_ON',\n  FOLLOWERS_ONZERO = 'NOTICE/FOLLOWERS_ONZERO',\n  HOST_OFF = 'NOTICE/HOST_OFF',\n  HOST_ON = 'NOTICE/HOST_ON',\n  HOSTS_REMAINING = 'NOTICE/HOSTS_REMAINING',\n  MSG_CHANNEL_SUSPENDED = 'NOTICE/MSG_CHANNEL_SUSPENDED',\n  MOD_SUCCESS = 'NOTICE/MOD_SUCCESS',\n  NOT_HOSTING = 'NOTICE/NOT_HOSTING',\n  R9K_OFF = 'NOTICE/R9K_OFF',\n  R9K_ON = 'NOTICE/R9K_ON',\n  ROOM_MODS = 'NOTICE/ROOM_MODS',\n  SLOW_OFF = 'NOTICE/SLOW_OFF',\n  SLOW_ON = 'NOTICE/SLOW_ON',\n  SUBS_OFF = 'NOTICE/SUBS_OFF',\n  SUBS_ON = 'NOTICE/SUBS_ON',\n  TIMEOUT_SUCCESS = 'NOTICE/TIMEOUT_SUCCESS',\n  UNBAN_SUCCESS = 'NOTICE/UNBAN_SUCCESS',\n  UNMOD_SUCCESS = 'NOTICE/UNMOD_SUCCESS',\n  UNRAID_SUCCESS = 'NOTICE/UNRAID_SUCCESS',\n  UNRECOGNIZED_CMD = 'NOTICE/UNRECOGNIZED_CMD',\n}\n\nexport enum PrivateMessageCompounds {\n  CHEER = 'PRIVMSG/CHEER',\n  HOSTED_WITHOUT_VIEWERS = 'PRIVMSG/HOSTED_WITHOUT_VIEWERS',\n  HOSTED_WITH_VIEWERS = 'PRIVMSG/HOSTED_WITH_VIEWERS',\n  HOSTED_AUTO = 'PRIVMSG/HOSTED_AUTO',\n}\n\nexport enum UserNoticeCompounds {\n  ANON_GIFT_PAID_UPGRADE = 'USERNOTICE/ANON_GIFT_PAID_UPGRADE',\n  GIFT_PAID_UPGRADE = 'USERNOTICE/GIFT_PAID_UPGRADE',\n  RAID = 'USERNOTICE/RAID',\n  RESUBSCRIPTION = 'USERNOTICE/RESUBSCRIPTION',\n  RITUAL = 'USERNOTICE/RITUAL',\n  SUBSCRIPTION = 'USERNOTICE/SUBSCRIPTION',\n  SUBSCRIPTION_GIFT = 'USERNOTICE/SUBSCRIPTION_GIFT',\n  SUBSCRIPTION_GIFT_COMMUNITY = 'USERNOTICE/SUBSCRIPTION_GIFT_COMMUNITY',\n}\n\nexport type EventTypes = Omit<ClientEventTypes, BaseClientEvents.ALL> & {\n  [Events.ALL]: [Messages]\n\n  [Events.JOIN]: [JoinMessage]\n  [Events.PART]: [PartMessage]\n  [Events.ROOM_STATE]: [RoomStateMessage]\n  [Events.USER_STATE]: [UserStateMessage]\n  [Events.CLEAR_CHAT]: [ClearChatMessages]\n  [Events.HOST_TARGET]: [HostTargetMessage]\n  [Events.MODE]: [ModeMessages]\n  [Events.NAMES]: [NamesMessage]\n  [Events.NAMES_END]: [NamesEndMessage]\n\n  /**\n   * NOTICE messages\n   */\n\n  [Events.NOTICE]: [NoticeMessages]\n\n  [Events.ALREADY_BANNED]: [NoticeMessage]\n  [Events.ALREADY_EMOTE_ONLY_OFF]: [NoticeMessage]\n  [Events.ALREADY_EMOTE_ONLY_ON]: [NoticeMessage]\n  [Events.ALREADY_R9K_OFF]: [NoticeMessage]\n  [Events.ALREADY_R9K_ON]: [NoticeMessage]\n  [Events.ALREADY_SUBS_OFF]: [NoticeMessage]\n  [Events.ALREADY_SUBS_ON]: [NoticeMessage]\n  [Events.BAD_HOST_HOSTING]: [NoticeMessage]\n  [Events.BAD_MOD_MOD]: [NoticeMessage]\n  [Events.BAN_SUCCESS]: [NoticeMessage]\n  [Events.BAD_UNBAN_NO_BAN]: [NoticeMessage]\n  [Events.COLOR_CHANGED]: [NoticeMessage]\n  [Events.CMDS_AVAILABLE]: [NoticeMessage]\n  [Events.COMMERCIAL_SUCCESS]: [NoticeMessage]\n  [Events.EMOTE_ONLY_OFF]: [NoticeMessage]\n  [Events.EMOTE_ONLY_ON]: [NoticeMessage]\n  [Events.FOLLOWERS_OFF]: [NoticeMessage]\n  [Events.FOLLOWERS_ON]: [NoticeMessage]\n  [Events.FOLLOWERS_ONZERO]: [NoticeMessage]\n  [Events.HOST_OFF]: [NoticeMessage]\n  [Events.HOST_ON]: [NoticeMessage]\n  [Events.HOSTS_REMAINING]: [NoticeMessage]\n  [Events.MSG_CHANNEL_SUSPENDED]: [NoticeMessage]\n  [Events.MOD_SUCCESS]: [NoticeMessage]\n  [Events.R9K_OFF]: [NoticeMessage]\n  [Events.R9K_ON]: [NoticeMessage]\n  [Events.ROOM_MODS]: [NoticeRoomModsMessage]\n  [Events.SLOW_OFF]: [NoticeMessage]\n  [Events.SLOW_ON]: [NoticeMessage]\n  [Events.SUBS_OFF]: [NoticeMessage]\n  [Events.SUBS_ON]: [NoticeMessage]\n  [Events.TIMEOUT_SUCCESS]: [NoticeMessage]\n  [Events.UNBAN_SUCCESS]: [NoticeMessage]\n  [Events.UNRAID_SUCCESS]: [NoticeMessage]\n  [Events.UNRECOGNIZED_CMD]: [NoticeMessage]\n\n  [NoticeCompounds.ALREADY_BANNED]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_EMOTE_ONLY_OFF]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_EMOTE_ONLY_ON]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_R9K_OFF]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_R9K_ON]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_SUBS_OFF]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_SUBS_ON]: [NoticeMessage]\n  [NoticeCompounds.BAD_HOST_HOSTING]: [NoticeMessage]\n  [NoticeCompounds.BAD_MOD_MOD]: [NoticeMessage]\n  [NoticeCompounds.BAN_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.BAD_UNBAN_NO_BAN]: [NoticeMessage]\n  [NoticeCompounds.COLOR_CHANGED]: [NoticeMessage]\n  [NoticeCompounds.CMDS_AVAILABLE]: [NoticeMessage]\n  [NoticeCompounds.COMMERCIAL_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.EMOTE_ONLY_OFF]: [NoticeMessage]\n  [NoticeCompounds.EMOTE_ONLY_ON]: [NoticeMessage]\n  [NoticeCompounds.FOLLOWERS_OFF]: [NoticeMessage]\n  [NoticeCompounds.FOLLOWERS_ON]: [NoticeMessage]\n  [NoticeCompounds.FOLLOWERS_ONZERO]: [NoticeMessage]\n  [NoticeCompounds.HOST_OFF]: [NoticeMessage]\n  [NoticeCompounds.HOST_ON]: [NoticeMessage]\n  [NoticeCompounds.HOSTS_REMAINING]: [NoticeMessage]\n  [NoticeCompounds.MSG_CHANNEL_SUSPENDED]: [NoticeMessage]\n  [NoticeCompounds.MOD_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.R9K_OFF]: [NoticeMessage]\n  [NoticeCompounds.R9K_ON]: [NoticeMessage]\n  [NoticeCompounds.ROOM_MODS]: [NoticeRoomModsMessage]\n  [NoticeCompounds.SLOW_OFF]: [NoticeMessage]\n  [NoticeCompounds.SLOW_ON]: [NoticeMessage]\n  [NoticeCompounds.SUBS_OFF]: [NoticeMessage]\n  [NoticeCompounds.SUBS_ON]: [NoticeMessage]\n  [NoticeCompounds.TIMEOUT_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.UNBAN_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.UNRAID_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.UNRECOGNIZED_CMD]: [NoticeMessage]\n\n  /**\n   * PRIVMSG messages\n   */\n\n  [Events.PRIVATE_MESSAGE]: [PrivateMessages]\n\n  [Events.CHEER]: [PrivateMessageWithBits]\n  [Events.HOSTED_WITHOUT_VIEWERS]: [HostingPrivateMessage]\n  [Events.HOSTED_WITH_VIEWERS]: [HostingWithViewersPrivateMessage]\n  [Events.HOSTED_AUTO]: [HostingAutoPrivateMessage]\n\n  [PrivateMessageCompounds.CHEER]: [PrivateMessageWithBits]\n  [PrivateMessageCompounds.HOSTED_WITHOUT_VIEWERS]: [HostingPrivateMessage]\n  [PrivateMessageCompounds.HOSTED_WITH_VIEWERS]: [\n    HostingWithViewersPrivateMessage,\n  ]\n  [PrivateMessageCompounds.HOSTED_AUTO]: [HostingAutoPrivateMessage]\n\n  /**\n   * USERNOTICE messages\n   */\n\n  [Events.USER_NOTICE]: [UserNoticeMessages]\n\n  [Events.ANON_GIFT_PAID_UPGRADE]: [UserNoticeAnonymousGiftPaidUpgradeMessage]\n  [Events.GIFT_PAID_UPGRADE]: [UserNoticeGiftPaidUpgradeMessage]\n  [Events.RAID]: [UserNoticeRaidMessage]\n  [Events.RESUBSCRIPTION]: [UserNoticeResubscriptionMessage]\n  [Events.RITUAL]: [UserNoticeRitualMessage]\n  [Events.SUBSCRIPTION]: [UserNoticeSubscriptionMessage]\n  [Events.SUBSCRIPTION_GIFT]: [UserNoticeSubscriptionGiftMessage]\n  [Events.SUBSCRIPTION_GIFT_COMMUNITY]: [\n    UserNoticeSubscriptionGiftCommunityMessage,\n  ]\n\n  [UserNoticeCompounds.ANON_GIFT_PAID_UPGRADE]: [\n    UserNoticeAnonymousGiftPaidUpgradeMessage,\n  ]\n  [UserNoticeCompounds.GIFT_PAID_UPGRADE]: [UserNoticeGiftPaidUpgradeMessage]\n  [UserNoticeCompounds.RAID]: [UserNoticeRaidMessage]\n  [UserNoticeCompounds.RESUBSCRIPTION]: [UserNoticeResubscriptionMessage]\n  [UserNoticeCompounds.RITUAL]: [UserNoticeRitualMessage]\n  [UserNoticeCompounds.SUBSCRIPTION]: [UserNoticeSubscriptionMessage]\n  [UserNoticeCompounds.SUBSCRIPTION_GIFT]: [UserNoticeSubscriptionGiftMessage]\n  [UserNoticeCompounds.SUBSCRIPTION_GIFT_COMMUNITY]: [\n    UserNoticeSubscriptionGiftCommunityMessage,\n  ]\n\n  [eventName: string]: [Messages] // This break p-event typing.\n}\n","import EventEmitter from 'eventemitter3'\nimport WebSocket from 'ws'\nimport Queue from 'p-queue'\n\nimport { Commands, Capabilities, BaseMessage } from '../twitch'\n\nimport createLogger, { Logger } from '../utils/logger'\n\nimport * as constants from './client-constants'\nimport { baseParser } from './utils/parsers'\nimport * as validators from './utils/client-validators'\nimport * as utils from './utils'\n\nimport { ClientOptions, ClientEvents, ClientEventTypes } from './client-types'\n\nclass Client extends EventEmitter<\n  ClientEventTypes & {\n    [eventName: string]: [BaseMessage]\n  }\n> {\n  private _options: ClientOptions\n  private _log: Logger\n\n  private _ws: WebSocket\n\n  private _queueJoin: Queue\n  private _queueAuthenticate: Queue\n  private _queue: Queue\n  private _moderatorQueue?: Queue\n\n  private _heartbeatTimeoutId?: NodeJS.Timeout\n  private _reconnectTimeoutId?: NodeJS.Timeout\n\n  private _clientPriority = 100\n\n  constructor(options: Partial<ClientOptions>) {\n    super()\n\n    // Validate options.\n    this._options = validators.clientOptions(options)\n    const { ssl, server, port, log } = this._options\n\n    this._log = createLogger({ name: 'Chat/Client', ...log })\n\n    // Instantiate WebSocket.\n    const protocol = ssl ? 'wss' : 'ws'\n    this._ws = new WebSocket(`${protocol}://${server}:${port}`)\n\n    this._ws.onopen = this._handleOpen.bind(this)\n    this._ws.onmessage = this._handleMessage.bind(this)\n    this._ws.onerror = this._handleError.bind(this)\n    this._ws.onclose = this._handleClose.bind(this)\n\n    // Instantiate Queues.\n    // See https://dev.twitch.tv/docs/irc/guide#command--message-limits\n    this._queueAuthenticate = this._options.isVerified\n      ? new Queue({ intervalCap: 200, interval: 10000 })\n      : new Queue({ intervalCap: 20, interval: 10000 })\n    this._queueJoin = this._options.isVerified\n      ? new Queue({ intervalCap: 2000, interval: 10000 })\n      : new Queue({ intervalCap: 20, interval: 10000 })\n    this._queue = new Queue({ intervalCap: 20, interval: 30000 })\n    this._moderatorQueue = new Queue({ intervalCap: 100, interval: 30000 })\n  }\n\n  isReady() {\n    return this._ws.readyState === 1\n  }\n\n  /**\n   * Send message to Twitch\n   */\n  async send(\n    message: string,\n    options?: Partial<{\n      priority: number\n      isModerator: boolean\n    }>,\n  ) {\n    try {\n      const { priority, isModerator } = {\n        priority: 0,\n        isModerator: false,\n        ...options,\n      }\n\n      const queue = message.startsWith('JOIN')\n        ? this._queueJoin\n        : message.startsWith('PASS')\n        ? this._queueAuthenticate\n        : isModerator && this._moderatorQueue\n        ? this._moderatorQueue\n        : this._queue\n\n      await queue.add(() => this._ws.send(message), { priority })\n      this._log.trace(`< ${message}`)\n    } catch (error) {\n      this._log.error(`< ${message}`)\n    }\n  }\n\n  disconnect() {\n    this._queueAuthenticate.pause()\n    this._queueJoin.pause()\n    this._queue.pause()\n    this._moderatorQueue?.pause()\n    // @ts-expect-error clean up p-queue\n    clearTimeout(this._queueAuthenticate._timeoutId)\n    // @ts-expect-error clean up p-queue\n    clearTimeout(this._queueJoin._timeoutId)\n    // @ts-expect-error clean up p-queue\n    clearTimeout(this._queue._timeoutId)\n    // @ts-expect-error clean up p-queue\n    clearTimeout(this._moderatorQueue?._timeoutId)\n\n    this._handleHeartbeatReset()\n    this._ws.close()\n  }\n\n  private _handleOpen() {\n    const priority = this._clientPriority\n\n    // Register for Twitch-specific capabilities.\n    this.send(`CAP REQ :${Object.values(Capabilities).join(' ')}`, { priority })\n\n    // Authenticate.\n    const { token, username } = this._options\n    if (token && username) {\n      this.send(`PASS ${token}`, { priority })\n    }\n    this.send(`NICK ${username}`, { priority })\n\n    this._handleHeartbeat()\n  }\n\n  private _handleMessage(messageEvent: WebSocket.MessageEvent) {\n    const rawMessage = messageEvent.data.toString()\n    this._log.trace(`> ${rawMessage.trim()}`)\n\n    const { token, username } = this._options\n    const priority = this._clientPriority\n\n    this._handleHeartbeat()\n\n    let messages: BaseMessage[] = []\n\n    try {\n      messages = baseParser(rawMessage, this._options.username)\n    } catch (error) {\n      /**\n       * Catch errors while parsing raw messages into base messages.\n       */\n      this._log.error(\n        '\\n' +\n          'An error occurred while attempting to parse a message from ' +\n          'Twitch. Please use the following stack trace and raw message to ' +\n          'resolve the bug in the TwitchJS source code, and then issue a ' +\n          'pull request at https://github.com/twitch-js/twitch-js/compare\\n' +\n          '\\n' +\n          'Stack trace:\\n' +\n          `${error}\\n` +\n          '\\n' +\n          'Raw message:\\n' +\n          rawMessage,\n      )\n      this.emit(ClientEvents.ERROR_ENCOUNTERED, error as Error)\n    }\n\n    messages.forEach((message) => {\n      const event = message.command || ''\n\n      this._log.debug({ ...message, _raw: undefined }, '> %s', event)\n\n      // Handle authentication failure.\n      if (utils.isAuthenticationFailedMessage(message)) {\n        this._multiEmit(\n          [ClientEvents.ALL, ClientEvents.AUTHENTICATION_FAILED],\n          {\n            ...message,\n            event: ClientEvents.AUTHENTICATION_FAILED,\n          },\n        )\n\n        this.disconnect()\n      } else {\n        if (message.command === Commands.PING) {\n          // Handle PING/PONG.\n          this.send('PONG :tmi.twitch.tv', { priority })\n        } else if (!token && message.command === Commands.WELCOME) {\n          // Handle successful connections without authentications.\n          this._multiEmit([ClientEvents.ALL, ClientEvents.CONNECTED], {\n            ...message,\n            event: ClientEvents.CONNECTED,\n          })\n        } else if (message.command === Commands.GLOBALUSERSTATE) {\n          // Handle successful authentications.\n          this._multiEmit([ClientEvents.ALL, ClientEvents.GLOBALUSERSTATE], {\n            ...message,\n            event: ClientEvents.GLOBALUSERSTATE,\n          })\n          if (token && username) {\n            this._multiEmit([ClientEvents.ALL, ClientEvents.CONNECTED], {\n              ...message,\n              event: ClientEvents.CONNECTED,\n            })\n          }\n        } else if (message.command === Commands.RECONNECT) {\n          // Handle RECONNECT.\n          this._multiEmit([ClientEvents.ALL, ClientEvents.RECONNECT], {\n            ...message,\n            event: ClientEvents.RECONNECT,\n          })\n        } else {\n          this.emit(ClientEvents.ALL, message)\n        }\n      }\n    })\n\n    this.emit(ClientEvents.RAW, rawMessage)\n  }\n\n  private _handleError(errorEvent: WebSocket.ErrorEvent) {\n    this._log.error(errorEvent)\n  }\n\n  private _handleClose(_closeEvent: WebSocket.CloseEvent) {\n    this.emit(ClientEvents.DISCONNECTED)\n  }\n\n  private _handleHeartbeat() {\n    this._handleHeartbeatReset()\n\n    const priority = this._clientPriority\n\n    // Send PING ...\n    this._heartbeatTimeoutId = setTimeout(() => {\n      this.send(Commands.PING, { priority })\n    }, constants.KEEP_ALIVE_PING_TIMEOUT)\n\n    // ... and if the heart beat fails, emit RECONNECT event.\n    this._reconnectTimeoutId = setTimeout(() => {\n      this.emit(ClientEvents.RECONNECT)\n    }, constants.KEEP_ALIVE_PING_TIMEOUT + 1000)\n  }\n\n  private _handleHeartbeatReset() {\n    if (this._heartbeatTimeoutId) {\n      clearTimeout(this._heartbeatTimeoutId)\n    }\n    if (this._reconnectTimeoutId) {\n      clearTimeout(this._reconnectTimeoutId)\n    }\n  }\n\n  private _multiEmit(\n    event: ClientEvents | ClientEvents[],\n    message: BaseMessage,\n  ) {\n    if (Array.isArray(event)) {\n      event.forEach((eventName) => this.emit(eventName, message))\n    } else {\n      this.emit(event, message)\n    }\n  }\n}\n\nexport default Client\n","import invariant from 'invariant'\n\nimport conformsTo from 'lodash/conformsTo'\nimport defaults from 'lodash/defaults'\nimport isString from 'lodash/isString'\nimport isFinite from 'lodash/isFinite'\nimport isBoolean from 'lodash/isBoolean'\nimport isNil from 'lodash/isNil'\n\nimport * as types from '../client-types'\n\nimport * as constants from '../client-constants'\nimport * as sanitizers from './client-sanitizers'\n\nexport const clientOptions = (\n  options: Partial<types.ClientOptions>,\n): types.ClientOptions => {\n  const shape = {\n    username: (value: any) => isNil(value) || isString(value),\n    token: (value: any) => isNil(value) || isString(value),\n    server: isString,\n    port: isFinite,\n    ssl: isBoolean,\n    isKnown: isBoolean,\n    isVerified: isBoolean,\n  }\n\n  const optionsWithDefaults: types.ClientOptions = defaults(\n    {\n      ...options,\n      username: sanitizers.username(options.username),\n      token: options.token ? sanitizers.token(options.token) : undefined,\n    },\n    {\n      server: constants.CHAT_SERVER,\n      port: constants.CHAT_SERVER_SSL_PORT,\n      ssl: true,\n      isKnown: false,\n      isVerified: false,\n    },\n  )\n\n  invariant(\n    conformsTo(optionsWithDefaults, shape),\n    '[twitch-js/Chat/Client] options: Expected valid options',\n  )\n\n  return optionsWithDefaults\n}\n","export const CHAT_SERVER = 'irc-ws.chat.twitch.tv'\nexport const CHAT_SERVER_PORT = 6667\nexport const CHAT_SERVER_SSL_PORT = 443\n\nexport const CONNECTION_TIMEOUT = 5000\nexport const KEEP_ALIVE_PING_TIMEOUT = 150000\nexport const KEEP_ALIVE_RECONNECT_TIMEOUT = 200000\n\nexport const JOIN_TIMEOUT = 1000 // milliseconds.\nexport const COMMAND_TIMEOUT = 1000 // milliseconds.\n\nexport const CLIENT_PRIORITY = 100\n\n// See https://dev.twitch.tv/docs/irc/guide/#command--message-limits.\nexport const RATE_LIMIT_USER = 20 // per period.\nexport const RATE_LIMIT_MODERATOR = 100 // per period.\nexport const RATE_LIMIT_KNOWN_BOT = 50 // per period.\nexport const RATE_LIMIT_VERIFIED_BOT = 7500 // per period.\n\nexport const ERROR_CONNECT_TIMED_OUT = 'ERROR: connect timed out'\nexport const ERROR_CONNECTION_IN_PROGRESS = 'ERROR: connection in progress'\nexport const ERROR_JOIN_TIMED_OUT = 'ERROR: join timed out'\nexport const ERROR_SAY_TIMED_OUT = 'ERROR: say timed out'\nexport const ERROR_COMMAND_TIMED_OUT = 'ERROR: command timed out'\nexport const ERROR_COMMAND_UNRECOGNIZED = 'ERROR: command unrecognized'\nexport const ERROR_PART_TIMED_OUT = 'ERROR: part timed out'\n\nexport const MESSAGE_PARAMETER_PREFIX = 'msgParam'\nexport const MESSAGE_PARAMETER_PREFIX_RE = new RegExp(\n  `^${MESSAGE_PARAMETER_PREFIX}(\\\\w+)`,\n)\nexport const PRIVATE_MESSAGE_HOSTED_RE = /:.+@jtv\\.tmi\\.twitch\\.tv PRIVMSG #?(\\w+) :(\\w+) is now (?:(auto) )?hosting[A-z ]+(\\d+)?/\n\nexport const ANONYMOUS_USERNAME = 'justinfan'\nexport const ANONYMOUS_USERNAME_RE = new RegExp(`^${ANONYMOUS_USERNAME}(\\\\d+)$`)\n","import { BaseMessage, Commands } from '../../twitch'\n\nexport const isAuthenticationFailedMessage = (message?: BaseMessage) =>\n  typeof message !== 'undefined' &&\n  message.command === Commands.NOTICE &&\n  message.channel === '' &&\n  message.message === 'Login authentication failed'\n","export const CHAT_SERVER = 'irc-ws.chat.twitch.tv'\nexport const CHAT_SERVER_PORT = 6667\nexport const CHAT_SERVER_SSL_PORT = 443\n\nexport const CONNECTION_TIMEOUT = 5000\nexport const KEEP_ALIVE_PING_TIMEOUT = 150000\nexport const KEEP_ALIVE_RECONNECT_TIMEOUT = 200000\n\nexport const JOIN_TIMEOUT = 1000 // milliseconds.\nexport const COMMAND_TIMEOUT = 1000 // milliseconds.\n\nexport const CLIENT_PRIORITY = 100\n\n// See https://dev.twitch.tv/docs/irc/guide/#command--message-limits.\nexport const RATE_LIMIT_USER = 20 // per period.\nexport const RATE_LIMIT_MODERATOR = 100 // per period.\nexport const RATE_LIMIT_KNOWN_BOT = 50 // per period.\nexport const RATE_LIMIT_VERIFIED_BOT = 7500 // per period.\n\nexport const ERROR_CONNECT_TIMED_OUT = 'ERROR: connect timed out'\nexport const ERROR_CONNECTION_IN_PROGRESS = 'ERROR: connection in progress'\nexport const ERROR_JOIN_TIMED_OUT = 'ERROR: join timed out'\nexport const ERROR_SAY_TIMED_OUT = 'ERROR: say timed out'\nexport const ERROR_COMMAND_TIMED_OUT = 'ERROR: command timed out'\nexport const ERROR_COMMAND_UNRECOGNIZED = 'ERROR: command unrecognized'\nexport const ERROR_PART_TIMED_OUT = 'ERROR: part timed out'\n\nexport const MESSAGE_PARAMETER_PREFIX = 'msgParam'\nexport const MESSAGE_PARAMETER_PREFIX_RE = new RegExp(\n  `^${MESSAGE_PARAMETER_PREFIX}(\\\\w+)`,\n)\nexport const PRIVATE_MESSAGE_HOSTED_RE = /:.+@jtv\\.tmi\\.twitch\\.tv PRIVMSG #?(\\w+) :(\\w+) is now (?:(auto) )?hosting[A-z ]+(\\d+)?/\n\nexport const ANONYMOUS_USERNAME = 'justinfan'\nexport const ANONYMOUS_USERNAME_RE = new RegExp(`^${ANONYMOUS_USERNAME}(\\\\d+)$`)\n\nexport const CONNECT = Symbol('connect')\nexport const CONNECTED = Symbol('connected')\nexport const DISCONNECT = Symbol('disconnect')\nexport const DISCONNECTED = Symbol('disconnected')\nexport const RECONNECT = Symbol('reconnect')\n","import camelCase from 'lodash/camelCase'\nimport isFinite from 'lodash/isFinite'\nimport replace from 'lodash/replace'\nimport toLower from 'lodash/toLower'\n\nimport { Badges, BooleanBadges, NumberBadges, EmoteTag } from '../../../twitch'\n\nexport const generalString = (maybeMessage: string) => {\n  return typeof maybeMessage === 'string'\n    ? replace(maybeMessage, /\\\\[sn]/g, ' ')\n    : undefined\n}\n\nexport const generalNumber = (maybeNumber: string) => {\n  const number = parseInt(maybeNumber, 10)\n  return isFinite(number) ? number : undefined\n}\n\nexport const generalBoolean = (maybeBoolean: string) => maybeBoolean === '1'\n\nexport const generalTimestamp = (maybeTimestamp: string) => {\n  const timestamp = new Date(parseInt(maybeTimestamp, 10))\n  return timestamp.toString() !== 'Invalid Date' ? timestamp : new Date()\n}\n\nexport const userType = (maybeUserType: string) => {\n  return typeof maybeUserType === 'string' ? maybeUserType : undefined\n}\n\nexport const broadcasterLanguage = (maybeLanguage: string) => {\n  return typeof maybeLanguage === 'string' ? maybeLanguage : undefined\n}\n\nexport const followersOnly = (maybeFollowersOnly: string) => {\n  const followersOnlyAsNumber = parseInt(maybeFollowersOnly, 10)\n\n  if (followersOnlyAsNumber === 0) {\n    return true\n  } else if (followersOnlyAsNumber > 0) {\n    return followersOnlyAsNumber\n  }\n\n  return false\n}\n\n/**\n * Badges tag\n * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags\n */\nexport const badges = (maybeBadges: string): Partial<Badges> => {\n  return typeof maybeBadges === 'string'\n    ? maybeBadges.split(',').reduce((parsed, badge) => {\n        const [rawKey, value] = badge.split('/')\n\n        if (typeof value === 'undefined') {\n          return parsed\n        }\n\n        const key = camelCase(rawKey)\n\n        if (key in BooleanBadges) {\n          return { ...parsed, [key]: generalBoolean(value) }\n        }\n\n        if (key in NumberBadges) {\n          return { ...parsed, [key]: parseInt(value, 10) }\n        }\n\n        return { ...parsed, [key]: value }\n      }, {} as Partial<Badges>)\n    : {}\n}\n\n/**\n * Emote tag\n * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags\n */\nexport const emotes = (maybeEmotes: string) => {\n  if (typeof maybeEmotes !== 'string') {\n    return []\n  }\n\n  return maybeEmotes.split('/').reduce((emoteTag, emoteIndices) => {\n    const [id, indices] = emoteIndices.split(':')\n\n    if (!id) {\n      return emoteTag\n    }\n\n    return [\n      ...emoteTag,\n      ...indices.split(',').map((index) => {\n        const [start, end] = index.split('-')\n        return { id, start: parseInt(start, 10), end: parseInt(end, 10) }\n      }),\n    ]\n  }, [] as EmoteTag[])\n}\n\nexport const emoteSets = (maybeEmoteSets: string) => {\n  return typeof maybeEmoteSets === 'string' ? maybeEmoteSets.split(',') : []\n}\n\nexport const mods = (message: string) => {\n  const [, modList] = message.split(': ')\n  return modList.split(', ')\n}\n\nexport const username = (...maybeUsernames: any[]): string =>\n  maybeUsernames.reduce((maybeUsername, name) => {\n    if (typeof name !== 'string') {\n      return maybeUsername\n    }\n\n    if (name === 'tmi.twitch.tv') {\n      return 'tmi.twitch.tv'\n    }\n\n    return toLower(name).split('.')[0]\n  }, undefined)\n","import camelCase from 'lodash/camelCase'\nimport gt from 'lodash/gt'\nimport toLower from 'lodash/toLower'\n\nimport {\n  BaseTags,\n  ClearChatTags,\n  GlobalUserStateTags,\n  ChatEvents,\n  Commands,\n  RoomStateTags,\n  UserStateTags,\n  MessageParameters,\n} from '../../../twitch'\n\nimport * as constants from '../../chat-constants'\nimport * as helpers from './chat-parser-helpers'\n\nexport const clearChat = (tags: BaseTags): ClearChatTags => ({\n  ...tags,\n  banReason: helpers.generalString(tags.banReason),\n  banDuration: helpers.generalNumber(tags.banDuration),\n})\n\nexport const privateMessageCheerEvent = (tags: BaseTags) => {\n  return gt(tags.bits, 0)\n    ? { event: ChatEvents.CHEER, bits: parseInt(tags.bits, 10) }\n    : { event: Commands.PRIVATE_MESSAGE }\n}\n\nexport const roomState = (roomStateTags: BaseTags): RoomStateTags =>\n  Object.entries(roomStateTags).reduce((tags, [tag, value]) => {\n    switch (tag) {\n      case 'followersOnly':\n        return { ...tags, [tag]: helpers.followersOnly(value) }\n      // Strings\n      case 'broadcasterLang':\n        return { ...tags, [tag]: helpers.generalString(value) }\n      // Numbers\n      case 'slow':\n        return { ...tags, [tag]: helpers.generalNumber(value) }\n      // Booleans\n      case 'emoteOnly':\n      case 'r9k':\n      case 'subsOnly':\n        return { ...tags, [tag]: helpers.generalBoolean(value) }\n      default:\n        return { ...tags, [tag]: value }\n    }\n  }, {})\n\nexport const userNoticeMessageParameters = (tags: BaseTags) =>\n  Object.entries(tags).reduce((parameters, [tag, value]) => {\n    const [, param] = constants.MESSAGE_PARAMETER_PREFIX_RE.exec(tag) || []\n\n    switch (param) {\n      // Numbers.\n      case 'Months':\n      case 'MassGiftCount':\n      case 'PromoGiftTotal':\n      case 'SenderCount':\n      case 'ViewerCount':\n        return {\n          ...parameters,\n          [camelCase(param)]: helpers.generalNumber(value),\n        }\n      // Not a msgParam.\n      case undefined:\n        return parameters\n      // Strings\n      default:\n        return {\n          ...parameters,\n          [camelCase(param)]: helpers.generalString(value),\n        }\n    }\n  }, {} as MessageParameters)\n\nexport const userState = (tags: BaseTags): UserStateTags => ({\n  ...tags,\n  badges: helpers.badges(tags.badges),\n  bits: helpers.generalNumber(tags.bits),\n  color: tags.color,\n  displayName: tags.displayName,\n  emotes: helpers.emotes(tags.emotes),\n  emoteSets: helpers.emoteSets(tags.emoteSets),\n  userType: helpers.userType(tags.userType),\n  username: tags.displayName ? toLower(tags.displayName) : tags.username,\n  isModerator: tags.mod === '1',\n})\n\nexport const globalUserState = (tags: BaseTags): GlobalUserStateTags => ({\n  ...tags,\n  ...userState(tags),\n})\n\nexport const privateMessage = userState\n\nexport const userNotice = userState\n","import { parse } from 'tekko/dist/parse'\nimport camelcaseKeys from 'camelcase-keys'\n\nimport gt from 'lodash/gt'\nimport isEmpty from 'lodash/isEmpty'\nimport isFinite from 'lodash/isFinite'\nimport toLower from 'lodash/toLower'\nimport toNumber from 'lodash/toNumber'\nimport toUpper from 'lodash/toUpper'\n\nimport {\n  BaseMessage,\n  ChatEvents,\n  ClearChatMessages,\n  ClearMessageMessage,\n  Commands,\n  Events,\n  GiftPaidUpgradeParameters,\n  GlobalUserStateMessage,\n  HostTargetMessage,\n  JoinMessage,\n  KnownNoticeMessageIds,\n  KnownUserNoticeMessageIds,\n  ModeMessages,\n  NamesEndMessage,\n  NamesMessage,\n  NoticeEvents,\n  NoticeMessage,\n  NoticeMessages,\n  NoticeTags,\n  PartMessage,\n  PrivateMessages,\n  RaidParameters,\n  ResubscriptionParameters,\n  RitualParameters,\n  RoomStateMessage,\n  SubscriptionGiftCommunityParameters,\n  SubscriptionGiftParameters,\n  SubscriptionParameters,\n  UserNoticeMessages,\n  UserNoticeTags,\n  UserStateMessage,\n} from '../../../twitch'\n\nimport * as constants from '../../chat-constants'\nimport * as utils from '../'\nimport * as helpers from './chat-parser-helpers'\nimport * as tagParsers from './chat-parser-tags'\n\nexport const base = (rawMessages: string, username = ''): BaseMessage[] => {\n  const rawMessagesV = rawMessages.split(/\\r?\\n/g)\n\n  return rawMessagesV.reduce((messages, rawMessage) => {\n    if (!rawMessage.length) {\n      return messages\n    }\n\n    const {\n      command,\n      tags = {},\n      prefix: { name, user, host } = {\n        name: undefined,\n        user: undefined,\n        host: undefined,\n      },\n      params: [channel, message],\n    } = parse(rawMessage)\n\n    const timestamp = String(tags['tmi-sent-ts']) || Date.now().toString()\n\n    const messageTags = isEmpty(tags)\n      ? {}\n      : (camelcaseKeys(tags) as { [key: string]: string })\n\n    const messageUsername = helpers.username(\n      host,\n      name,\n      user,\n      messageTags.login,\n      messageTags.username,\n      messageTags.displayName,\n    )\n\n    const baseMessage = {\n      _raw: rawMessage,\n      timestamp: helpers.generalTimestamp(timestamp),\n      command: command as Commands,\n      event: command as Events,\n      channel: channel !== '*' ? channel : '',\n      username: messageUsername,\n      isSelf:\n        typeof messageUsername === 'string' &&\n        toLower(username) === messageUsername,\n      tags: messageTags,\n      message,\n    }\n\n    return [...messages, baseMessage]\n  }, [] as BaseMessage[])\n}\n\n/**\n * Join a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#join-twitch-membership\n */\nexport const joinMessage = (baseMessage: BaseMessage): JoinMessage => {\n  const [, username, , , channel] =\n    /:(.+)!(.+)@(.+).tmi.twitch.tv JOIN (#.+)/g.exec(baseMessage._raw) || []\n\n  return {\n    ...baseMessage,\n    channel,\n    command: Commands.JOIN,\n    event: Commands.JOIN,\n    username,\n  }\n}\n\n/**\n * Join or depart from a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#join-twitch-membership\n * @see https://dev.twitch.tv/docs/irc/membership/#part-twitch-membership\n */\nexport const partMessage = (baseMessage: BaseMessage): PartMessage => {\n  const [, username, , , channel] =\n    /:(.+)!(.+)@(.+).tmi.twitch.tv PART (#.+)/g.exec(baseMessage._raw) || []\n\n  return {\n    ...baseMessage,\n    channel,\n    command: Commands.PART,\n    event: Commands.PART,\n    username,\n  }\n}\n\n/**\n * Gain/lose moderator (operator) status in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#mode-twitch-membership\n */\nexport const modeMessage = (baseMessage: BaseMessage): ModeMessages => {\n  const [, channel, mode, username] =\n    /:[^\\s]+ MODE (#[^\\s]+) (-|\\+)o ([^\\s]+)/g.exec(baseMessage._raw) || []\n\n  const isModerator = mode === '+'\n\n  const baseModeMessage = {\n    ...baseMessage,\n    command: Commands.MODE as Commands.MODE,\n    channel,\n    username,\n  }\n\n  return isModerator\n    ? {\n        ...baseModeMessage,\n        event: ChatEvents.MOD_GAINED,\n        message: `+o`,\n        isModerator: true,\n      }\n    : {\n        ...baseModeMessage,\n        event: ChatEvents.MOD_LOST,\n        message: '-o',\n        isModerator: false,\n      }\n}\n\n/**\n * List current chatters in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n */\nexport const namesMessage = (baseMessage: BaseMessage): NamesMessage => {\n  const [, , , channel, names] =\n    /:(.+).tmi.twitch.tv 353 (.+) = (#.+) :(.+)/g.exec(baseMessage._raw) || []\n\n  const namesV = names.split(' ')\n\n  return {\n    ...baseMessage,\n    channel,\n    command: Commands.NAMES,\n    event: Commands.NAMES,\n    usernames: namesV,\n  }\n}\n\n/**\n * End of list current chatters in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n */\nexport const namesEndMessage = (baseMessage: BaseMessage): NamesEndMessage => {\n  const [\n    ,\n    username,\n    ,\n    channel,\n    // message,\n  ] = /:(.+).tmi.twitch.tv 366 (.+) (#.+) :(.+)/g.exec(baseMessage._raw) || []\n\n  return {\n    ...baseMessage,\n    channel,\n    command: Commands.NAMES_END,\n    event: Commands.NAMES_END,\n    username,\n  }\n}\n\n/**\n * GLOBALUSERSTATE message\n */\nexport const globalUserStateMessage = (\n  baseMessage: BaseMessage,\n): GlobalUserStateMessage => {\n  const { tags, ...other } = baseMessage\n\n  return {\n    ...other,\n    command: Commands.GLOBALUSERSTATE,\n    event: Commands.GLOBALUSERSTATE,\n    tags: tagParsers.globalUserState(tags),\n  }\n}\n\n/**\n * Temporary or permanent ban on a channel.\n * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n *\n * All chat is cleared (deleted).\n * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n */\nexport const clearChatMessage = (\n  baseMessage: BaseMessage,\n): ClearChatMessages => {\n  const { tags, message: username, ...other } = baseMessage\n\n  if (typeof username !== 'undefined') {\n    return {\n      ...other,\n      tags: {\n        ...tags,\n        banReason: helpers.generalString(tags.banReason),\n        banDuration: helpers.generalNumber(tags.banDuration),\n      },\n      command: Commands.CLEAR_CHAT,\n      event: ChatEvents.USER_BANNED,\n      username,\n    }\n  }\n\n  return {\n    ...other,\n    command: Commands.CLEAR_CHAT,\n    event: Commands.CLEAR_CHAT,\n  }\n}\n\n/**\n * Single message removal on a channel.\n * @see https://dev.twitch.tv/docs/irc/commands#clearmsg-twitch-commands\n */\nexport const clearMessageMessage = (\n  baseMessage: BaseMessage,\n): ClearMessageMessage => {\n  const { tags } = baseMessage\n\n  return {\n    ...baseMessage,\n    tags: {\n      login: tags.login,\n      targetMsgId: tags.targetMsgId,\n    },\n    command: Commands.CLEAR_MESSAGE,\n    event: Commands.CLEAR_MESSAGE,\n    targetMessageId: tags.targetMsgId,\n  }\n}\n\n/**\n * Host starts or stops a message.\n * @see https://dev.twitch.tv/docs/irc/commands/#hosttarget-twitch-commands\n */\nexport const hostTargetMessage = (\n  baseMessage: BaseMessage,\n): HostTargetMessage => {\n  const [, channel, username, numberOfViewers] =\n    /:tmi.twitch.tv HOSTTARGET (#[^\\s]+) :([^\\s]+)?\\s?(\\d+)?/g.exec(\n      baseMessage._raw,\n    ) || []\n  const isStopped = username === '-'\n\n  return {\n    ...baseMessage,\n    channel,\n    username,\n    command: Commands.HOST_TARGET,\n    event: isStopped ? ChatEvents.HOST_OFF : ChatEvents.HOST_ON,\n    numberOfViewers: isFinite(toNumber(numberOfViewers))\n      ? parseInt(numberOfViewers, 10)\n      : undefined,\n  }\n}\n\n/**\n * When a user joins a channel or a room setting is changed.\n */\nexport const roomStateMessage = (\n  baseMessage: BaseMessage,\n): RoomStateMessage => {\n  const { tags, ...other } = baseMessage\n\n  return {\n    ...other,\n    command: Commands.ROOM_STATE,\n    event: Commands.ROOM_STATE,\n    tags: tagParsers.roomState(tags),\n  }\n}\n\n/**\n * NOTICE/ROOM_MODS message\n * @see https://dev.twitch.tv/docs/irc/commands/#msg-id-tags-for-the-notice-commands-capability\n */\nexport const noticeMessage = (baseMessage: BaseMessage): NoticeMessages => {\n  const { tags: baseTags, ...other } = baseMessage\n\n  const tags = (utils.isAuthenticationFailedMessage(baseMessage)\n    ? { ...baseTags, msgId: toLower(Events.AUTHENTICATION_FAILED) }\n    : baseTags) as NoticeTags\n\n  const event = toUpper(tags.msgId) as NoticeEvents\n\n  switch (tags.msgId) {\n    case KnownNoticeMessageIds.ROOM_MODS:\n      return {\n        ...other,\n        command: Commands.NOTICE,\n        event: NoticeEvents.ROOM_MODS,\n        tags,\n        mods: helpers.mods(other.message),\n      }\n    default:\n      return {\n        ...other,\n        command: Commands.NOTICE,\n        event,\n        tags,\n      } as NoticeMessage\n  }\n}\n\n/**\n * USERSTATE message\n * When a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport const userStateMessage = (\n  baseMessage: BaseMessage,\n): UserStateMessage => {\n  const { tags, ...other } = baseMessage\n\n  return {\n    ...other,\n    command: Commands.USER_STATE,\n    event: Commands.USER_STATE,\n    tags: tagParsers.userState(tags),\n  }\n}\n\n/**\n * PRIVMSG message\n * When a user joins a channel or sends a PRIVMSG to a channel.\n * When a user cheers a channel.\n * When a user hosts your channel while connected as broadcaster.\n */\nexport const privateMessage = (baseMessage: BaseMessage): PrivateMessages => {\n  const { _raw, tags } = baseMessage\n\n  if (gt(tags.bits, 0)) {\n    return {\n      ...userStateMessage(baseMessage),\n      command: Commands.PRIVATE_MESSAGE,\n      event: ChatEvents.CHEER,\n      bits: parseInt(tags.bits, 10),\n    }\n  }\n\n  const [\n    isHostingPrivateMessage,\n    channel,\n    displayName,\n    isAuto,\n    numberOfViewers,\n  ] = constants.PRIVATE_MESSAGE_HOSTED_RE.exec(_raw) || []\n\n  if (isHostingPrivateMessage) {\n    if (isAuto) {\n      return {\n        ...baseMessage,\n        command: Commands.PRIVATE_MESSAGE,\n        event: ChatEvents.HOSTED_AUTO,\n        channel: `#${channel}`,\n        tags: { displayName },\n        numberOfViewers: helpers.generalNumber(numberOfViewers),\n      }\n    }\n\n    if (numberOfViewers) {\n      return {\n        ...baseMessage,\n        command: Commands.PRIVATE_MESSAGE,\n        event: ChatEvents.HOSTED_WITH_VIEWERS,\n        channel: `#${channel}`,\n        tags: { displayName },\n        numberOfViewers: helpers.generalNumber(numberOfViewers),\n      }\n    }\n\n    return {\n      ...baseMessage,\n      command: Commands.PRIVATE_MESSAGE,\n      event: ChatEvents.HOSTED_WITHOUT_VIEWERS,\n      channel: `#${channel}`,\n      tags: { displayName },\n    }\n  }\n\n  return {\n    ...userStateMessage(baseMessage),\n    command: Commands.PRIVATE_MESSAGE,\n    event: Commands.PRIVATE_MESSAGE,\n  }\n}\n\n/**\n * USERNOTICE message\n */\nexport const userNoticeMessage = (\n  baseMessage: BaseMessage,\n): UserNoticeMessages => {\n  const command = Commands.USER_NOTICE\n  const tags = {\n    ...tagParsers.userNotice(baseMessage.tags),\n    systemMsg: helpers.generalString(baseMessage.tags.systemMsg),\n  } as UserNoticeTags\n  const systemMessage = helpers.generalString(baseMessage.tags.systemMsg) || ''\n  const parameters = tagParsers.userNoticeMessageParameters(tags)\n\n  switch (tags.msgId) {\n    /**\n     * On anonymous gifted subscription paid upgrade to a channel.\n     */\n    case KnownUserNoticeMessageIds.ANON_GIFT_PAID_UPGRADE:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.ANON_GIFT_PAID_UPGRADE,\n        parameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On gifted subscription paid upgrade to a channel.\n     */\n    case KnownUserNoticeMessageIds.GIFT_PAID_UPGRADE:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.GIFT_PAID_UPGRADE,\n        parameters: parameters as GiftPaidUpgradeParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On channel raid.\n     */\n    case KnownUserNoticeMessageIds.RAID:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.RAID,\n        parameters: parameters as RaidParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On resubscription (subsequent months) to a channel.\n     */\n    case KnownUserNoticeMessageIds.RESUBSCRIPTION:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.RESUBSCRIPTION,\n        parameters: parameters as ResubscriptionParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On channel ritual.\n     */\n    case KnownUserNoticeMessageIds.RITUAL:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.RITUAL,\n        parameters: parameters as RitualParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On subscription gift to a channel community.\n     */\n    case KnownUserNoticeMessageIds.SUBSCRIPTION_GIFT_COMMUNITY:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.SUBSCRIPTION_GIFT_COMMUNITY,\n        parameters: parameters as SubscriptionGiftCommunityParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On subscription gift to a channel.\n     */\n    case KnownUserNoticeMessageIds.SUBSCRIPTION_GIFT:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.SUBSCRIPTION_GIFT,\n        parameters: parameters as SubscriptionGiftParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On subscription (first month) to a channel.\n     */\n    case KnownUserNoticeMessageIds.SUBSCRIPTION:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.SUBSCRIPTION,\n        parameters: parameters as SubscriptionParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * Unknown USERNOTICE event.\n     */\n    default:\n      return {\n        ...baseMessage,\n        command,\n        event: toUpper(tags.msgId),\n        tags,\n        parameters,\n        systemMessage,\n      } as UserNoticeMessages\n  }\n}\n\nexport default base\n","import { BaseMessage, Events, Commands } from '../../twitch'\n\nimport * as constants from '../chat-constants'\n\nexport const isAuthenticationFailedMessage = (message?: BaseMessage) =>\n  typeof message !== 'undefined' &&\n  message.command === Commands.NOTICE &&\n  message.channel === '' &&\n  message.message === 'Login authentication failed'\n\nexport const getEventNameFromMessage = (message: BaseMessage) =>\n  typeof message !== 'undefined' ? message.command || message.event : Events.ALL\n\nexport const isUserAnonymous = (value: string) =>\n  constants.ANONYMOUS_USERNAME_RE.test(value)\n","import isEmpty from 'lodash/isEmpty'\nimport random from 'lodash/random'\n\nimport { ANONYMOUS_USERNAME } from '../chat-constants'\n\nexport const channel = (value?: any): string => {\n  if (typeof value !== 'string' || value.length === 0) {\n    return ''\n  }\n\n  value = value.toLowerCase()\n\n  if (!value.startsWith('#')) {\n    return `#${value}`\n  }\n\n  return value\n}\n\nexport const token = (value: any): string => {\n  if (value == null) {\n    return 'TWITCHJS'\n  }\n\n  if (value.startsWith('oauth:')) {\n    return value\n  }\n\n  return `oauth:${value}`\n}\n\nexport const username = (value: any): string => {\n  if (isEmpty(value) || value === 'justinfan') {\n    return `${ANONYMOUS_USERNAME}${random(80000, 81000)}`\n  }\n\n  return value\n}\n","import invariant from 'invariant'\n\nimport conformsTo from 'lodash/conformsTo'\nimport defaults from 'lodash/defaults'\nimport isString from 'lodash/isString'\nimport isFinite from 'lodash/isFinite'\nimport isFunction from 'lodash/isFunction'\nimport isBoolean from 'lodash/isBoolean'\nimport isNil from 'lodash/isNil'\n\nimport * as types from '../chat-types'\n\nimport * as constants from '../chat-constants'\nimport * as sanitizers from './chat-sanitizers'\n\nexport const chatOptions = (\n  options: Partial<types.ChatOptions>,\n): types.ChatOptions => {\n  const shape = {\n    username: (value: any) => isNil(value) || isString(value),\n    token: (value: any) => isNil(value) || isString(value),\n    isKnown: isBoolean,\n    isVerified: isBoolean,\n    connectionTimeout: isFinite,\n    joinTimeout: isFinite,\n    onAuthenticationFailure: isFunction,\n  }\n\n  const optionsWithDefaults = defaults(\n    {\n      ...options,\n      username: options.username\n        ? sanitizers.username(options.username)\n        : undefined,\n      token: options.token ? sanitizers.token(options.token) : undefined,\n    },\n    {\n      isKnown: false,\n      isVerified: false,\n      connectionTimeout: constants.CONNECTION_TIMEOUT,\n      joinTimeout: constants.JOIN_TIMEOUT,\n      onAuthenticationFailure: () => Promise.reject(),\n    },\n  )\n\n  invariant(\n    conformsTo(optionsWithDefaults, shape),\n    '[twitch-js/Chat] options: Expected valid options',\n  )\n\n  return optionsWithDefaults\n}\n\nexport const channel = (channel: string): string => {\n  channel = sanitizers.channel(channel)\n\n  if (!channel) {\n    throw new Error('Channel required')\n  }\n\n  return channel\n}\n","import { CustomError } from 'ts-custom-error'\n\nexport class TwitchJSError extends CustomError {\n  timestamp: Date = new Date()\n\n  constructor(message: string) {\n    super(message)\n    Object.defineProperty(this, 'name', { value: 'TwitchJSError' })\n  }\n}\n\nexport class AuthenticationError extends TwitchJSError {\n  public constructor(message: string, public body?: any) {\n    super(message)\n    Object.defineProperty(this, 'name', {\n      value: 'TwitchJSAuthenticationError',\n    })\n  }\n}\n","import { TwitchJSError } from '../utils/error'\n\nexport * from '../utils/error'\n\nexport class ChatError extends TwitchJSError {\n  public constructor(message: string, public body?: any) {\n    super(message)\n    Object.defineProperty(this, 'name', {\n      value: 'TwitchJSChatError',\n    })\n  }\n}\n\nexport class ParseError extends TwitchJSError {\n  public constructor(message: string, public body?: any) {\n    super(message)\n    Object.defineProperty(this, 'name', {\n      value: 'TwitchJSChatParseError',\n    })\n  }\n}\n\nexport class JoinError extends TwitchJSError {\n  public constructor(message: string, public body?: any) {\n    super(message)\n    Object.defineProperty(this, 'name', {\n      value: 'TwitchJSChatJoinError',\n    })\n  }\n}\n\nexport class TimeoutError extends TwitchJSError {\n  public constructor(message: string, public body?: any) {\n    super(message)\n    Object.defineProperty(this, 'name', {\n      value: 'TwitchJSChatTimeoutError',\n    })\n  }\n}\n","import { FetchOptions } from '../utils/fetch'\nimport { LoggerOptions } from '../utils/logger'\n\nexport type ApiOptions = {\n  token: string\n  clientId: string\n  log?: LoggerOptions\n  onAuthenticationFailure?: () => Promise<string>\n}\n\nexport enum ApiReadyStates {\n  'NOT_READY',\n  'READY',\n  'INITIALIZED',\n}\n\nexport type ApiFetchOptions = FetchOptions\n","import EventEmitter from 'eventemitter3'\nimport pEvent, { CancelablePromise } from 'p-event'\n\nimport uniq from 'lodash/uniq'\n\nimport {\n  BaseMessage,\n  ChatCommands,\n  Commands,\n  Events,\n  GlobalUserStateTags,\n  Messages,\n  NoticeMessages,\n  RoomStateMessage,\n  UserStateMessage,\n} from '../twitch'\n\nimport createLogger, { Logger } from '../utils/logger'\n\nimport Client from '../Client'\nimport { ClientEvents } from '../Client/client-types'\n\nimport * as parsers from './utils/parsers'\nimport * as sanitizers from './utils/chat-sanitizers'\nimport * as validators from './utils/chat-validators'\n\nimport * as constants from './chat-constants'\nimport * as Errors from './chat-errors'\nimport {\n  ChatReadyStates,\n  EventTypes,\n  ChatOptions,\n  ChannelStates,\n  NoticeCompounds,\n  PrivateMessageCompounds,\n  UserNoticeCompounds,\n  ChannelState,\n} from './chat-types'\n\n/**\n * Interact with Twitch chat.\n *\n * ## Connecting\n *\n * ```js\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const username = 'ronni'\n * const { chat } = new TwitchJs({ token, username })\n *\n * chat.connect().then(globalUserState => {\n *   // Do stuff ...\n * })\n * ```\n *\n * **Note:** Connecting with a `token` and a `username` is optional.\n *\n * Once connected, `chat.userState` will contain\n * [[GlobalUserStateTags|global user state information]].\n *\n * ## Joining a channel\n *\n * ```js\n * const channel = '#dallas'\n *\n * chat.join(channel).then(channelState => {\n *   // Do stuff with channelState...\n * })\n * ```\n *\n * After joining a channel, `chat.channels[channel]` will contain\n * [[ChannelState|channel state information]].\n *\n * ## Listening for events\n *\n * ```js\n * // Listen to all events\n * chat.on('*', message => {\n *   // Do stuff with message ...\n * })\n *\n * // Listen to private messages\n * chat.on('PRIVMSG', privateMessage => {\n *   // Do stuff with privateMessage ...\n * })\n * ```\n *\n * Events are nested; for example:\n *\n * ```js\n * // Listen to subscriptions only\n * chat.on('USERNOTICE/SUBSCRIPTION', userStateMessage => {\n *   // Do stuff with userStateMessage ...\n * })\n *\n * // Listen to all user notices\n * chat.on('USERNOTICE', userStateMessage => {\n *   // Do stuff with userStateMessage ...\n * })\n * ```\n *\n * For added convenience, TwitchJS also exposes event constants.\n *\n * ```js\n * const { chat } = new TwitchJs({ token, username })\n *\n * // Listen to all user notices\n * chat.on(chat.events.USER_NOTICE, userStateMessage => {\n *   // Do stuff with userStateMessage ...\n * })\n * ```\n *\n * ## Sending messages\n *\n * To send messages, [Chat] must be initialized with a `username` and a\n * [`token`](../#authentication) with `chat_login` scope.\n *\n * All messages sent to Twitch are automatically rate-limited according to\n * [Twitch Developer documentation](https://dev.twitch.tv/docs/irc/guide/#command--message-limits).\n *\n * ### Speak in channel\n *\n * ```js\n * const channel = '#dallas'\n *\n * chat\n *   .say(channel, 'Kappa Keepo Kappa')\n *   // Optionally ...\n *   .then(() => {\n *     // ... do stuff on success ...\n *   })\n * ```\n *\n * ### Send command to channel\n *\n * All chat commands are currently supported and exposed as camel-case methods. For\n * example:\n *\n * ```js\n * const channel = '#dallas'\n *\n * // Enable followers-only for 1 week\n * chat.followersOnly(channel, '1w')\n *\n * // Ban ronni\n * chat.ban(channel, 'ronni')\n * ```\n *\n * **Note:** `Promise`-resolves for each commands are\n * [planned](https://github.com/twitch-devs/twitch-js/issues/87).\n *\n * ## Joining multiple channels\n *\n * ```js\n * const channels = ['#dallas', '#ronni']\n *\n * Promise.all(channels.map(channel => chat.join(channel))).then(channelStates => {\n *   // Listen to all messages from #dallas only\n *   chat.on('#dallas', message => {\n *     // Do stuff with message ...\n *   })\n *\n *   // Listen to private messages from #dallas and #ronni\n *   chat.on('PRIVMSG', privateMessage => {\n *     // Do stuff with privateMessage ...\n *   })\n *\n *   // Listen to private messages from #dallas only\n *   chat.on('PRIVMSG/#dallas', privateMessage => {\n *     // Do stuff with privateMessage ...\n *   })\n *\n *   // Listen to all private messages from #ronni only\n *   chat.on('PRIVMSG/#ronni', privateMessage => {\n *     // Do stuff with privateMessage ...\n *   })\n * })\n * ```\n *\n * ### Broadcasting to all channels\n *\n * ```js\n * chat\n *   .broadcast('Kappa Keepo Kappa')\n *   // Optionally ...\n *   .then(userStateMessages => {\n *     // ... do stuff with userStateMessages on success ...\n *   })\n * ```\n */\nclass Chat extends EventEmitter<EventTypes> {\n  static Commands = Commands\n\n  static Events = Events\n\n  static CompoundEvents = {\n    [Events.NOTICE]: NoticeCompounds,\n    [Events.PRIVATE_MESSAGE]: PrivateMessageCompounds,\n    [Events.USER_NOTICE]: UserNoticeCompounds,\n  }\n\n  private _internalEmitter = new EventEmitter()\n\n  private _options: ChatOptions\n\n  private _log: Logger\n\n  private _client?: Client\n\n  private _readyState: ChatReadyStates = ChatReadyStates.WAITING\n\n  private _connectionAttempts = 0\n  private _connectionInProgress?: CancelablePromise<any>\n  private _disconnectionInProgress?: Promise<void>\n  private _reconnectionInProgress?: CancelablePromise<any>\n\n  private _globalUserState?: GlobalUserStateTags\n  private _channelState: ChannelStates = {}\n\n  private _isAuthenticated = false\n\n  /**\n   * Chat constructor.\n   */\n  constructor(options: Partial<ChatOptions>) {\n    super()\n\n    this._options = validators.chatOptions(options)\n\n    // Create logger.\n    this._log = createLogger({ name: 'Chat', ...this._options.log })\n\n    this._internalEmitter.on(constants.CONNECT, this._handleConnect)\n    this._internalEmitter.on(constants.DISCONNECT, this._handleDisconnect)\n    this._internalEmitter.on(constants.RECONNECT, this._handleReconnect)\n  }\n\n  /**\n   * Connect to Twitch.\n   */\n  connect(): Promise<void> {\n    if (this._connectionInProgress) {\n      return this._connectionInProgress\n    }\n\n    this._connectionInProgress = pEvent<string, Messages>(\n      this._internalEmitter,\n      constants.CONNECTED,\n      {\n        rejectionEvents: [Events.ERROR_ENCOUNTERED],\n        timeout: this._options.connectionTimeout,\n      },\n    )\n\n    this._internalEmitter.emit(constants.CONNECT)\n    return this._connectionInProgress\n  }\n\n  /**\n   * Updates the client options after instantiation.\n   * To update `token` or `username`, use `reconnect()`.\n   */\n  updateOptions(options: Partial<ChatOptions>) {\n    const { token, username } = this._options\n    this._options = validators.chatOptions({ ...options, token, username })\n  }\n\n  /**\n   * Send a raw message to Twitch.\n   */\n  send(\n    message: string,\n    options?: Partial<{ priority: number; isModerator: boolean }>,\n  ): Promise<void> {\n    if (!this._client) {\n      throw new Errors.ChatError('Not connected')\n    }\n\n    return this._client.send(message, options)\n  }\n\n  /**\n   * Disconnected from Twitch.\n   */\n  disconnect(): Promise<void> {\n    if (this._connectionInProgress) {\n      this._connectionInProgress.cancel()\n      this._connectionInProgress = undefined\n    }\n\n    this._disconnectionInProgress = pEvent(\n      this._internalEmitter,\n      constants.DISCONNECTED,\n      { timeout: this._options.connectionTimeout },\n    ).catch()\n\n    this._internalEmitter.emit(constants.DISCONNECT)\n    return this._disconnectionInProgress\n  }\n\n  /**\n   * Reconnect to Twitch, providing new options to the client.\n   */\n  reconnect(options?: Partial<ChatOptions>): CancelablePromise<any> {\n    if (this._reconnectionInProgress) {\n      return this._reconnectionInProgress\n    }\n\n    if (options) {\n      this._options = validators.chatOptions({ ...this._options, ...options })\n    }\n\n    this._reconnectionInProgress = pEvent<string, Messages>(\n      this._internalEmitter,\n      constants.CONNECTED,\n      {\n        timeout: this._options.connectionTimeout,\n      },\n    )\n\n    this._internalEmitter.emit(constants.RECONNECT)\n    return this._reconnectionInProgress\n  }\n\n  /**\n   * Join a channel.\n   *\n   * @example <caption>Joining #dallas</caption>\n   * const channel = '#dallas'\n   *\n   * chat.join(channel).then(channelState => {\n   *   // Do stuff with channelState...\n   * })\n   *\n   * @example <caption>Joining multiple channels</caption>\n   * const channels = ['#dallas', '#ronni']\n   *\n   * Promise.all(channels.map(channel => chat.join(channel)))\n   *   .then(channelStates => {\n   *     // Listen to all PRIVMSG\n   *     chat.on('PRIVMSG', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *\n   *     // Listen to PRIVMSG from #dallas ONLY\n   *     chat.on('PRIVMSG/#dallas', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *     // Listen to all PRIVMSG from #ronni ONLY\n   *     chat.on('PRIVMSG/#ronni', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *   })\n   */\n  async join(channel: string) {\n    channel = validators.channel(channel)\n\n    const joinProfiler = this._log.profile(`joining ${channel}`)\n\n    const [roomState, userState] = await Promise.all([\n      pEvent<string, RoomStateMessage>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        `${Commands.ROOM_STATE}/${channel}`,\n      ),\n\n      this._isAuthenticated\n        ? pEvent<string, UserStateMessage>(\n            // @ts-expect-error EventTypes breaks this\n            this,\n            `${Commands.USER_STATE}/${channel}`,\n          )\n        : undefined,\n      this.send(`${Commands.JOIN} ${channel}`),\n    ])\n\n    const channelState = {\n      roomState: roomState.tags,\n      userState: userState ? userState.tags : undefined,\n    }\n    this._setChannelState(roomState.channel, channelState)\n\n    joinProfiler.done(`Joined ${channel}`)\n\n    return channelState\n  }\n\n  /**\n   * Depart from a channel.\n   */\n  part(channel: string) {\n    channel = validators.channel(channel)\n    this._log.info(`parting ${channel}`)\n\n    this._removeChannelState(channel)\n    return this.send(`${Commands.PART} ${channel}`)\n  }\n\n  /**\n   * Send a message to a channel.\n   */\n  async say(\n    channel: string,\n    message: string,\n    options: { priority?: number } = {},\n  ): Promise<void> {\n    if (!this._isAuthenticated) {\n      throw new Errors.ChatError(\n        'To send messages, please connect with a token and username',\n      )\n    }\n\n    channel = validators.channel(channel)\n\n    const isCommand = message.startsWith('/')\n    const isModerator = this._channelState[channel]?.userState?.mod === '1'\n\n    if (isCommand) {\n      this._log.info(`CMD/${channel} :${message}`)\n    } else {\n      this._log.info(`PRIVMSG/${channel} :${message}`)\n    }\n\n    const resolver: Promise<void | UserStateMessage> = isCommand\n      ? // Commands do not result in USERSTATE messages\n        Promise.resolve()\n      : pEvent<string, UserStateMessage>(\n          // @ts-expect-error EventTypes breaks this\n          this,\n          `${Commands.USER_STATE}/${channel}`,\n        )\n\n    await Promise.all([\n      resolver,\n      this.send(`${Commands.PRIVATE_MESSAGE} ${channel} :${message}`, {\n        isModerator,\n        ...options,\n      }),\n    ])\n  }\n\n  /**\n   * Broadcast message to all connected channels.\n   */\n  async broadcast(message: string) {\n    if (!this._isAuthenticated) {\n      throw new Errors.ChatError(\n        'To broadcast, please connect with a token and username',\n      )\n    }\n\n    return this._getChannels().map((channel) => this.say(channel, message))\n  }\n\n  /**\n   * This command will allow you to permanently ban a user from the chat room.\n   */\n  async ban(channel: string, username: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.BAN} ${username}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [\n          `${NoticeCompounds.BAN_SUCCESS}/${channel}`,\n          `${NoticeCompounds.ALREADY_BANNED}/${channel}`,\n        ],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will allow you to block all messages from a specific user in\n   * chat and whispers if you do not wish to see their comments.\n   */\n  async block(channel: string, username: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.BLOCK} ${username}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * Single message removal on a channel.\n   */\n  async delete(channel: string, targetMessageId: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.DELETE} ${targetMessageId}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * This command will allow the Broadcaster and chat moderators to completely\n   * wipe the previous chat history.\n   */\n  async clear(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.CLEAR}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${Commands.CLEAR_CHAT}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * Allows you to change the color of your username.\n   */\n  async color(channel: string, color: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.COLOR} ${color}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.COLOR_CHANGED}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * An Affiliate and Partner command that runs a commercial for all of your\n   * viewers.\n   */\n  async commercial(\n    channel: string,\n    length: 30 | 60 | 90 | 120 | 150 | 180,\n  ): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.COMMERCIAL} ${length}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.COMMERCIAL_SUCCESS}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command allows you to set your room so only messages that are 100%\n   * emotes are allowed.\n   */\n  async emoteOnly(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.EMOTE_ONLY}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [\n          `${NoticeCompounds.EMOTE_ONLY_ON}/${channel}`,\n          `${NoticeCompounds.ALREADY_EMOTE_ONLY_ON}/${channel}`,\n        ],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command allows you to disable emote only mode if you previously\n   * enabled it.\n   */\n  async emoteOnlyOff(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.EMOTE_ONLY_OFF}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [\n          `${NoticeCompounds.EMOTE_ONLY_OFF}/${channel}`,\n          `${NoticeCompounds.ALREADY_EMOTE_ONLY_OFF}/${channel}`,\n        ],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command allows you or your mods to restrict chat to all or some of\n   * your followers, based on how long they’ve followed.\n   * @param period - Follow time from 0 minutes (all followers) to 3 months.\n   */\n  async followersOnly(\n    channel: string,\n    period: string,\n  ): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.FOLLOWERS_ONLY} ${period}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [\n          `${NoticeCompounds.FOLLOWERS_ONZERO}/${channel}`,\n          `${NoticeCompounds.FOLLOWERS_ON}/${channel}`,\n        ],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will disable followers only mode if it was previously enabled\n   * on the channel.\n   */\n  async followersOnlyOff(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.FOLLOWERS_ONLY_OFF}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.FOLLOWERS_OFF}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  async help(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.HELP}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.CMDS_AVAILABLE}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will allow you to host another channel on yours.\n   */\n  async host(channel: string, hostChannel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.HOST} ${hostChannel}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.HOST_ON}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * Adds a stream marker (with an optional description, max 140 characters) at\n   * the current timestamp. You can use markers in the Highlighter for easier\n   * editing.\n   */\n  async marker(channel: string, description: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.MARKER} ${description.slice(0, 140)}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * This command will color your text based on your chat name color.\n   */\n  async me(channel: string, text: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.ME} ${text}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * This command will allow you to promote a user to a channel moderator.\n   */\n  async mod(channel: string, username: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.MOD} ${username}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.MOD_SUCCESS}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will display a list of all chat moderators for that specific\n   * channel.\n   */\n  async mods(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.MODS}`\n\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.ROOM_MODS}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n\n    return notice\n  }\n\n  /**\n   * @deprecated\n   */\n  async r9K(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.R9K}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [\n          `${NoticeCompounds.R9K_ON}/${channel}`,\n          `${NoticeCompounds.ALREADY_R9K_ON}/${channel}`,\n        ],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * @deprecated\n   */\n  async r9KOff(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.R9K_OFF}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [\n          `${NoticeCompounds.R9K_OFF}/${channel}`,\n          `${NoticeCompounds.ALREADY_R9K_OFF}/${channel}`,\n        ],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will send the viewer to another live channel.\n   */\n  async raid(channel: string, raidChannel: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.RAID} ${raidChannel}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * This command allows you to set a limit on how often users in the chat room\n   * are allowed to send messages (rate limiting).\n   */\n  async slow(channel: string, seconds: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.SLOW} ${seconds}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.SLOW_ON}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command allows you to disable slow mode if you had previously set it.\n   */\n  async slowOff(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.SLOW_OFF}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.SLOW_OFF}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command allows you to set your room so only users subscribed to you\n   * can talk in the chat room. If you don't have the subscription feature it\n   * will only allow the Broadcaster and the channel moderators to talk in the\n   * chat room.\n   */\n  async subscribers(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.SUBSCRIBERS}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [\n          `${NoticeCompounds.SUBS_ON}/${channel}`,\n          `${NoticeCompounds.ALREADY_SUBS_ON}/${channel}`,\n        ],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command allows you to disable subscribers only chat room if you\n   * previously enabled it.\n   */\n  async subscribersOff(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.SUBSCRIBERS_OFF}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [\n          `${NoticeCompounds.SUBS_OFF}/${channel}`,\n          `${NoticeCompounds.ALREADY_SUBS_OFF}/${channel}`,\n        ],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command allows you to temporarily ban someone from the chat room for\n   * 10 minutes by default. This will be indicated to yourself and the\n   * temporarily banned subject in chat on a successful temporary ban. A new\n   * timeout command will overwrite an old one.\n   */\n  async timeout(\n    channel: string,\n    username: string,\n    timeout?: number,\n  ): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const timeoutArg = timeout ? ` ${timeout}` : ''\n    const message = `/${ChatCommands.TIMEOUT} ${username}${timeoutArg}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.TIMEOUT_SUCCESS}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will allow you to lift a permanent ban on a user from the\n   * chat room. You can also use this command to end a ban early; this also\n   * applies to timeouts.\n   */\n  async unban(channel: string, username: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.UNBAN} ${username}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.UNBAN_SUCCESS}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will allow you to remove users from your block list that you\n   * previously added.\n   */\n  async unblock(channel: string, username: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.UNBLOCK} ${username}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * Using this command will revert the embedding from hosting a channel and\n   * return it to its normal state.\n   */\n  async unhost(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.UNHOST}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.HOST_OFF}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will allow you to demote an existing moderator back to viewer\n   * status (removing their moderator abilities).\n   */\n  async unmod(channel: string, username: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.UNMOD} ${username}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.UNMOD_SUCCESS}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will cancel the raid.\n   */\n  async unraid(channel: string): Promise<NoticeMessages> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.UNRAID}`\n    const [notice] = await Promise.all([\n      pEvent<string, NoticeMessages>(\n        // @ts-expect-error EventTypes breaks this\n        this,\n        [`${NoticeCompounds.UNRAID_SUCCESS}/${channel}`],\n      ),\n      this.say(channel, message),\n    ])\n    return notice\n  }\n\n  /**\n   * This command will grant VIP status to a user.\n   */\n  unvip(channel: string, username: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.UNVIP} ${username}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * This command will grant VIP status to a user.\n   */\n  vip(channel: string, username: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.VIP} ${username}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * This command will display a list of VIPs for that specific channel.\n   */\n  vips(channel: string): Promise<void> {\n    channel = validators.channel(channel)\n    const message = `/${ChatCommands.VIPS}`\n    return this.say(channel, message)\n  }\n\n  /**\n   * This command sends a private message to another user on Twitch.\n   */\n  async whisper(username: string, message: string): Promise<void> {\n    if (!this._isAuthenticated) {\n      throw new Errors.ChatError(\n        'To whisper, please connect with a token and username',\n      )\n    }\n\n    const command = `/${ChatCommands.WHISPER} ${username} ${message}`\n    return this.send(command)\n  }\n\n  private _handleConnect = () => {\n    const connectProfiler = this._log.profile('connecting ...')\n\n    // Connect ...\n    this._readyState = ChatReadyStates.CONNECTING\n\n    // Increment connection attempts.\n    this._connectionAttempts += 1\n\n    if (this._client) {\n      // Remove all listeners, just in case.\n      this._client.removeAllListeners()\n    }\n\n    // Create client and connect.\n    this._client = new Client(this._options)\n\n    // Handle disconnects.\n    this._client.once(ClientEvents.DISCONNECTED, () =>\n      this._internalEmitter.emit(constants.DISCONNECT),\n    )\n\n    // Listen for reconnects.\n    this._client.once(ClientEvents.RECONNECT, () =>\n      this._internalEmitter.emit(constants.RECONNECT),\n    )\n\n    // Listen for authentication failure.\n    this._client.once(\n      ClientEvents.AUTHENTICATION_FAILED,\n      this._handleClientAuthenticationFailure,\n    )\n\n    // Once the client is connected, resolve ...\n    this._client.once(ClientEvents.CONNECTED, (message) => {\n      this._readyState = ChatReadyStates.CONNECTED\n      if (this._options.token && this._options.username) {\n        const globalUserStateMessage = parsers.globalUserStateMessage(message)\n        this._globalUserState = globalUserStateMessage.tags\n        this._isAuthenticated = true\n      }\n      this._handleJoinsAfterConnect()\n      this._internalEmitter.emit(constants.CONNECTED)\n      connectProfiler.done('connected')\n    })\n\n    // Handle messages.\n    this._client.on(ClientEvents.ALL, this._handleClientMessage, this)\n  }\n\n  private _handleDisconnect = () => {\n    this._log.info('disconnecting ...')\n    this._readyState = ChatReadyStates.DISCONNECTING\n\n    this._isAuthenticated = false\n    this._clearChannelState()\n\n    this._client?.once(ClientEvents.DISCONNECTED, () => {\n      this._internalEmitter.emit(constants.DISCONNECTED)\n      this._readyState = ChatReadyStates.DISCONNECTED\n      this._log.info('disconnected')\n    })\n\n    this._client?.disconnect()\n  }\n\n  private _handleReconnect = () => {\n    this._log.info('reconnecting ...')\n    this._readyState = ChatReadyStates.RECONNECTING\n\n    this._client?.removeAllListeners()\n\n    this._client?.once(ClientEvents.DISCONNECTED, () => {\n      this._internalEmitter.emit(constants.CONNECT)\n    })\n\n    this._client?.disconnect()\n  }\n\n  private _handleClientAuthenticationFailure = async (\n    originError: BaseMessage,\n  ) => {\n    try {\n      this._log.info('retrying ...')\n\n      const token = await this._options.onAuthenticationFailure?.()\n\n      if (token) {\n        this._log.info('re-authenticating ...')\n        this._options = { ...this._options, token }\n      }\n\n      this._internalEmitter.emit(constants.CONNECT)\n    } catch (reAuthenticationError) {\n      const error = (reAuthenticationError as Error) || originError\n\n      const authenticationError = new Errors.AuthenticationError(\n        originError?.message || 'Login authentication failed',\n        originError,\n      )\n\n      this._internalEmitter.emit(\n        Events.ERROR_ENCOUNTERED,\n        authenticationError as any,\n      )\n      this._log.error(error as Error, 'authentication failed')\n    }\n  }\n\n  private _handleClientMessage(baseMessage: BaseMessage) {\n    try {\n      const [eventName, message] = this._parseMessageForEmitter(baseMessage)\n      this._emit(eventName, message)\n    } catch (clientMessageError) {\n      /**\n       * Catch errors while parsing base messages into events.\n       */\n      this._log.error(\n        '\\n' +\n          'An error occurred while attempting to parse a message into a ' +\n          'event. Please use the following stack trace and raw message to ' +\n          'resolve the bug in the TwitchJS source code, and then issue a ' +\n          'pull request at https://github.com/twitch-js/twitch-js/compare\\n' +\n          '\\n' +\n          'Stack trace:\\n' +\n          `${clientMessageError}\\n` +\n          '\\n' +\n          'Base message:\\n' +\n          JSON.stringify(baseMessage),\n      )\n      this._internalEmitter.emit(\n        ClientEvents.ERROR_ENCOUNTERED,\n        clientMessageError as Error,\n      )\n    }\n  }\n\n  private async _handleJoinsAfterConnect() {\n    try {\n      const channels = this._getChannels()\n      await Promise.all(channels.map((channel) => this.join(channel)))\n    } catch (joinsError) {\n      this._log.error(joinsError as Error, 'unable to rejoin channels')\n    }\n  }\n\n  private _getChannels() {\n    return Object.keys(this._channelState)\n  }\n\n  private _getChannelState(channel: string): ChannelState | undefined {\n    return this._channelState[channel]\n  }\n\n  private _setChannelState(channel: string, state: ChannelState) {\n    this._channelState[channel] = state\n  }\n\n  private _removeChannelState(channel: string) {\n    this._channelState = Object.entries(this._channelState).reduce(\n      (channelStates, [name, state]) => {\n        return name === channel\n          ? channelStates\n          : { ...channelStates, [name]: state }\n      },\n      {},\n    )\n  }\n\n  private _clearChannelState() {\n    this._channelState = {}\n  }\n\n  private _parseMessageForEmitter(\n    baseMessage: BaseMessage,\n  ): [string, Messages] {\n    const channel = sanitizers.channel(baseMessage.channel)\n\n    const baseEventName = baseMessage.event || baseMessage.command\n\n    switch (baseMessage.command) {\n      case Events.JOIN: {\n        const message = parsers.joinMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.PART: {\n        const message = parsers.partMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.NAMES: {\n        const message = parsers.namesMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.NAMES_END: {\n        const message = parsers.namesEndMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.CLEAR_CHAT: {\n        const message = parsers.clearChatMessage(baseMessage)\n        const eventName = `${baseEventName}/${message.event}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.CLEAR_MESSAGE: {\n        const message = parsers.clearMessageMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.HOST_TARGET: {\n        const message = parsers.hostTargetMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.MODE: {\n        const message = parsers.modeMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n\n        const channelState = this._getChannelState(channel)\n\n        if (\n          this._isAuthenticated &&\n          typeof channelState?.userState !== 'undefined' &&\n          message.username === this._options.username\n        ) {\n          this._setChannelState(channel, {\n            ...channelState,\n            userState: {\n              ...channelState.userState,\n              mod: message.isModerator ? '1' : '0',\n              isModerator: message.isModerator,\n            },\n          })\n        }\n        return [eventName, message]\n      }\n\n      case Events.USER_STATE: {\n        const message = parsers.userStateMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n\n        const channelState = this._getChannelState(channel)\n\n        if (channelState) {\n          this._setChannelState(channel, {\n            ...channelState,\n            userState: message.tags,\n          })\n        }\n        return [eventName, message]\n      }\n\n      case Events.ROOM_STATE: {\n        const message = parsers.roomStateMessage(baseMessage)\n        const eventName = `${baseEventName}/${channel}`\n\n        this._setChannelState(channel, {\n          ...this._getChannelState(channel),\n          roomState: message,\n        })\n        return [eventName, message]\n      }\n\n      case Events.NOTICE: {\n        const message = parsers.noticeMessage(baseMessage)\n        const eventName = `${baseEventName}/${message.event}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.USER_NOTICE: {\n        const message = parsers.userNoticeMessage(baseMessage)\n        const eventName = `${baseEventName}/${message.event}/${channel}`\n        return [eventName, message]\n      }\n\n      case Events.PRIVATE_MESSAGE: {\n        const message = parsers.privateMessage(baseMessage)\n        const eventName = `${baseEventName}/${message.event}/${channel}`\n        return [eventName, message]\n      }\n\n      default: {\n        const eventName = channel\n          ? `${baseEventName}/${channel}`\n          : baseEventName\n        return [eventName, baseMessage]\n      }\n    }\n  }\n\n  private _emit(eventName: string, message: Messages) {\n    try {\n      if (eventName) {\n        this._log.info(message, eventName)\n\n        const events = uniq(eventName.split('/'))\n\n        events\n          .filter((part) => part !== '#')\n          .reduce<string[]>((parents, part) => {\n            const eventParts = [...parents, part]\n            const eventCompound = eventParts.join('/')\n            if (eventParts.length > 1) {\n              super.emit(part, message)\n            }\n            super.emit(eventCompound, message)\n            return eventParts\n          }, [])\n      }\n\n      // Emit message under the ALL `*` event.\n      super.emit(Events.ALL, message)\n    } catch (emitError) {\n      /**\n       * Catch external implementation errors.\n       */\n      this._log.error(\n        '\\n' +\n          `While attempting to handle the ${message.command} event, an ` +\n          'error occurred in your implementation. To avoid seeing this ' +\n          'message, please resolve the error:\\n' +\n          '\\n' +\n          `${(emitError as Error).stack}\\n` +\n          '\\n' +\n          'Parsed messages:\\n' +\n          JSON.stringify(message),\n      )\n\n      this._internalEmitter.emit(\n        ClientEvents.ERROR_ENCOUNTERED,\n        emitError as Error,\n      )\n    }\n  }\n}\n\nexport default Chat\n","import fetch from 'cross-fetch'\nimport { stringify, IStringifyOptions } from 'qs'\nimport camelCaseKeys from 'camelcase-keys'\n\nimport { TwitchJSError } from '../error'\n\ntype QueryParams = {\n  /** Any query parameters you want to add to your request. */\n  [key: string]: string | number | boolean\n}\n\ninterface BodyParams {\n  [key: string]: any\n}\n\nexport type FetchOptions<Query = QueryParams, Body = BodyParams> = Omit<\n  RequestInit,\n  'body'\n> & { search?: Query } & { body?: Body }\n\nexport class FetchError extends TwitchJSError {\n  public constructor(message: string, public body?: any) {\n    super(message)\n    Object.defineProperty(this, 'name', { value: 'TwitchJSFetchError' })\n  }\n}\n\n/**\n * Fetches URL\n */\nconst fetchUtil = async <\n  Response = any,\n  Query = QueryParams,\n  Body = BodyParams\n>(\n  url: RequestInfo,\n  options?: FetchOptions<Query, Body>,\n  qsOptions?: IStringifyOptions,\n) => {\n  const { search, body: bodyParams, ...rest } = options || {}\n\n  const queryParams = search\n    ? stringify(search, {\n        ...qsOptions,\n        addQueryPrefix: true,\n        arrayFormat: 'repeat',\n      })\n    : ''\n\n  const jsonInit = getJsonInit(bodyParams)\n\n  const init = {\n    ...rest,\n    ...jsonInit,\n    headers: {\n      ...options?.headers,\n      ...jsonInit.headers,\n    },\n  }\n\n  const response = await fetch(`${url}${queryParams}`, init)\n\n  const json = await response.json().catch(() => ({}))\n\n  const body = camelCaseKeys(json, { deep: true }) as\n    | Response\n    | { error: string; status: number; message: string }\n\n  if ('error' in body) {\n    throw new FetchError(body.message, body)\n  }\n\n  if (!response.ok) {\n    throw new FetchError(response.statusText, {\n      error: true,\n      status: response.status,\n      message: response.statusText,\n    })\n  }\n\n  return body\n}\n\nconst getJsonInit = (\n  input?: any,\n): { body?: string | FormData; headers?: HeadersInit } => {\n  try {\n    if (!input) {\n      return {}\n    }\n\n    if (toString.call(input) === '[object FormData]') {\n      return { body: input }\n    }\n\n    const body = JSON.stringify(input)\n    return { body, headers: { 'Content-Type': 'application/json' } }\n  } catch (err) {\n    return { body: input }\n  }\n}\n\nexport default fetchUtil\n","import invariant from 'invariant'\n\nimport conformsTo from 'lodash/conformsTo'\nimport defaults from 'lodash/defaults'\nimport isFunction from 'lodash/isFunction'\nimport isString from 'lodash/isString'\nimport isUndefined from 'lodash/isUndefined'\n\nimport { ApiOptions } from '../api-types'\n\nexport const apiOptions = (options: Partial<ApiOptions>): ApiOptions => {\n  const shape = {\n    token: isString,\n    clientId: isString,\n    onAuthenticationFailure: (cb: unknown) => isFunction(cb) || isUndefined(cb),\n  }\n\n  options = defaults(options, {\n    clientId: undefined,\n    onAuthenticationFailure: undefined,\n  })\n\n  invariant(conformsTo(options, shape), 'Expected valid options')\n\n  return options as ApiOptions\n}\n","import includes from 'lodash/includes'\nimport toUpper from 'lodash/toUpper'\n\nimport { ApiValidateResponse } from '../twitch'\n\nimport createLogger, { Logger } from '../utils/logger'\nimport fetchUtil, { FetchError } from '../utils/fetch'\nimport { AuthenticationError } from '../utils/error'\n\nimport * as validators from './utils/api-validators'\n\nimport { ApiOptions, ApiReadyStates, ApiFetchOptions } from './api-types'\n\n/**\n * Make requests to Twitch API.\n *\n * ## Initializing\n *\n * ```js\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const clientId = 'uo6dggojyb8d6soh92zknwmi5ej1q2'\n * const { api } = new TwitchJs({ token, clientId })\n * ```\n *\n * ## Making requests\n *\n * By default, the API client makes requests to the\n * [Helix API](https://dev.twitch.tv/docs/api), and exposes [[Api.get]],\n * [[Api.post]] and [[Api.put]] methods. Query and body parameters are provided\n * via `options.search` and `options.body` properties, respectively.\n *\n * ### Examples\n *\n * #### Get bits leaderboard\n * ```js\n * api\n *   .get('bits/leaderboard', { search: { user_id: '44322889' } })\n *   .then(response => {\n *     // Do stuff with response ...\n *   })\n * ```\n *\n * #### Get the latest Overwatch live streams\n * ```\n * api\n *   .get('streams', { search: { game_id: '1234' } })\n *   .then(response => {\n *     // Do stuff with response ...\n *   })\n * ```\n *\n * #### Start a channel commercial\n * ```\n * api\n *   .post('/channels/commercial', {\n *     body: { broadcaster_id: '44322889', length: 30 },\n *   })\n *   .then(response => {\n *     // Do stuff with response ...\n *   })\n * ```\n */\n\nclass Api {\n  private _options: ApiOptions\n  private _log: Logger\n\n  private _readyState: ApiReadyStates = ApiReadyStates.READY\n\n  private _status!: ApiValidateResponse\n\n  constructor(options: Partial<ApiOptions>) {\n    this._options = validators.apiOptions(options)\n\n    this._log = createLogger({ name: 'Api', ...this._options.log })\n  }\n\n  get readyState() {\n    return this._readyState\n  }\n\n  get status() {\n    return this._status\n  }\n\n  /**\n   * Update client options.\n   */\n  updateOptions(options: Partial<ApiOptions>) {\n    this._options = validators.apiOptions({ ...this._options, ...options })\n  }\n\n  /**\n   * Initialize API client and retrieve status.\n   * @see https://dev.twitch.tv/docs/v5/#root-url\n   */\n  async initialize(newOptions?: Partial<ApiOptions>) {\n    if (newOptions) {\n      this._options = validators.apiOptions({ ...this._options, ...newOptions })\n    }\n\n    if (!newOptions && this.readyState === 2) {\n      return Promise.resolve()\n    }\n\n    const response = await fetchUtil<ApiValidateResponse>(\n      'https://id.twitch.tv/oauth2/validate',\n      { headers: { Authorization: `Bearer ${this._options.token}` } },\n    )\n\n    this._readyState = ApiReadyStates.INITIALIZED\n    this._status = response\n  }\n\n  /**\n   * Check if current credentials include `scope`.\n   * @see https://dev.twitch.tv/docs/authentication/#twitch-api-v5\n   */\n  hasScope(\n    /** Scope to check */\n    scope: string,\n  ): Promise<boolean> {\n    return new Promise((resolve, reject) =>\n      this.status?.scopes?.includes(scope) ? resolve(true) : reject(false),\n    )\n  }\n\n  /**\n   * GET endpoint.\n   *\n   * @example <caption>Get user follows (Helix)</caption>\n   * ```\n   * api.get('users/follows', { search: { to_id: '23161357' } })\n   *   .then(response => {\n   *     // Do stuff with response ...\n   *   })\n   * ```\n   */\n  get<T = any>(endpoint = '', options?: ApiFetchOptions) {\n    return this._handleFetch<T>(endpoint, options)\n  }\n\n  /**\n   * POST endpoint.\n   */\n  post<T = any>(endpoint: string, options?: ApiFetchOptions) {\n    return this._handleFetch<T>(endpoint, { ...options, method: 'post' })\n  }\n\n  /**\n   * PUT endpoint.\n   */\n  put<T = any>(endpoint: string, options?: ApiFetchOptions) {\n    return this._handleFetch<T>(endpoint, { ...options, method: 'put' })\n  }\n\n  private _getAuthenticationHeaders(): RequestInit['headers'] {\n    const { clientId, token } = this._options\n\n    return {\n      Authorization: `Bearer ${token}`,\n      'Client-Id': clientId,\n    }\n  }\n\n  private async _handleFetch<T = any>(\n    maybeUrl = '',\n    options: ApiFetchOptions = {},\n  ) {\n    const baseUrl = 'https://api.twitch.tv/helix'\n\n    const url = `${baseUrl}/${maybeUrl}`\n\n    const message = `${toUpper(options.method) || 'GET'} ${url}`\n\n    const fetchProfiler = this._log.profile()\n\n    const performRequest = async () => {\n      const authenticationHeaders = this._getAuthenticationHeaders()\n\n      const fetchOptions = {\n        ...options,\n        headers: {\n          ...options.headers,\n          ...authenticationHeaders,\n        },\n      }\n\n      try {\n        return await fetchUtil<T>(url, fetchOptions)\n      } catch (error) {\n        if (error instanceof FetchError && error.body.status === 401) {\n          throw new AuthenticationError(error.message, error.body)\n        }\n        throw error\n      }\n    }\n\n    let caughtError\n    try {\n      return await performRequest()\n    } catch (error) {\n      if (\n        typeof this._options.onAuthenticationFailure === 'function' &&\n        error instanceof AuthenticationError\n      ) {\n        const token = await this._handleAuthenticationFailure(error)\n\n        if (token) {\n          this._log.info(`${message} ... retrying with new token`)\n          this.updateOptions({ token })\n          return await performRequest()\n        }\n      }\n\n      caughtError = error\n      throw caughtError\n    } finally {\n      fetchProfiler.done(message, caughtError)\n    }\n  }\n\n  private async _handleAuthenticationFailure(originError: Error) {\n    try {\n      return await this._options.onAuthenticationFailure?.()\n    } catch (error) {\n      this._log.error(error as Error, 'onAuthenticationFailure error occurred')\n      throw originError\n    }\n  }\n}\n\nexport default Api\n","import Chat from './Chat'\nimport { ChatOptions } from './Chat/chat-types'\nimport Api from './Api'\nimport { ApiOptions } from './Api/api-types'\n\nimport { LoggerOptions } from './utils/logger'\n\nexport { Chat }\nexport { Api }\nexport * from './twitch'\n\ntype BaseTwitchJsOptions = {\n  clientId?: string\n  token?: string\n  username?: string\n  log?: LoggerOptions\n  onAuthenticationFailure?: () => Promise<string>\n}\n\ntype IndividualClassOptions = {\n  chat?: ChatOptions\n  api?: ApiOptions\n}\n\nexport type TwitchJsOptions = BaseTwitchJsOptions & IndividualClassOptions\n\n/**\n * Interact with chat and make requests to Twitch API.\n *\n * ## Initializing\n * ```\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const clientId = 'uo6dggojyb8d6soh92zknwmi5ej1q2'\n * const username = 'ronni'\n * const twitchJs = new TwitchJs({ token, clientId, username })\n *\n * twitchJs.chat.connect().then(globalUserState => {\n *   // Do stuff ...\n * })\n *\n * twitchJs.api.get('channel').then(response => {\n *   // Do stuff ...\n * })\n * ```\n */\n\nclass TwitchJs {\n  chat: Chat\n  api: Api\n\n  static Chat = Chat\n  static Api = Api\n\n  constructor(options: TwitchJsOptions) {\n    const {\n      token,\n      username,\n      clientId,\n      log,\n      onAuthenticationFailure,\n      chat,\n      api,\n    } = options\n\n    this.chat = new Chat({\n      log,\n      ...chat,\n      token,\n      username,\n      onAuthenticationFailure,\n    })\n\n    this.api = new Api({\n      log,\n      ...api,\n      token,\n      clientId,\n      onAuthenticationFailure,\n    })\n  }\n\n  /**\n   * Update client options.\n   */\n  updateOptions(options: IndividualClassOptions) {\n    const { chat, api } = options\n\n    if (chat) {\n      this.chat.updateOptions(chat)\n    }\n\n    if (api) {\n      this.api.updateOptions(api)\n    }\n  }\n}\n\nexport default TwitchJs\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","Capabilities","MembershipCommands","TagCommands","OtherCommands","BaseCommands","Commands","ChatEvents","ChatCommands","KnownNoticeMessageIds","__assign","assign","t","s","i","n","arguments","length","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","r","ar","error","__spread","concat","PrivateMessageEvents","KnownUserNoticeMessageIds","KnownNoticeMessageIdsUpperCase","entries","reduce","uppercase","_a","_c","key","toUpperCase","NoticeEvents","keys","events","event","NOTICE","BooleanBadges","NumberBadges","UserNoticeEvents","USER_NOTICE","Events","BaseClientEvents","createLogger","options","name","other","scope","join","logger","pino","prettyPrint","level","profile","startMessage","now","Date","info","endMessage","message","generalTimestamp","maybeTimestamp","timestamp","parseInt","toString","baseParser","rawMessages","username","split","messages","rawMessage","parse","command","_b","tags","_d","undefined","user","host","_e","channel","String","messageTags","isEmpty","camelcaseKeys","messageUsername","_i","maybeUsernames","maybeUsername","toLower","helpers.username","login","displayName","_raw","helpers.generalTimestamp","isSelf","token","startsWith","ChatReadyStates","NoticeCompounds","PrivateMessageCompounds","UserNoticeCompounds","ClientEvents","_super","_this","_options","shape","isNil","isString","server","port","isFinite","ssl","isBoolean","isKnown","isVerified","optionsWithDefaults","defaults","random","sanitizers.token","invariant","conformsTo","validators.clientOptions","log","_log","protocol","_ws","WebSocket","onopen","_handleOpen","bind","onmessage","_handleMessage","onerror","_handleError","onclose","_handleClose","_queueAuthenticate","Queue","intervalCap","interval","_queueJoin","_queue","_moderatorQueue","Client","readyState","priority","isModerator","add","send","trace","pause","clearTimeout","_timeoutId","_handleHeartbeatReset","close","_clientPriority","values","_handleHeartbeat","messageEvent","data","trim","emit","ERROR_ENCOUNTERED","forEach","debug","utils.isAuthenticationFailedMessage","PING","WELCOME","GLOBALUSERSTATE","_multiEmit","ALL","CONNECTED","RECONNECT","AUTHENTICATION_FAILED","disconnect","RAW","errorEvent","_closeEvent","DISCONNECTED","_heartbeatTimeoutId","setTimeout","_reconnectTimeoutId","constants.KEEP_ALIVE_PING_TIMEOUT","isArray","eventName","EventEmitter","MESSAGE_PARAMETER_PREFIX_RE","RegExp","PRIVATE_MESSAGE_HOSTED_RE","CONNECT","DISCONNECT","generalString","maybeMessage","replace","generalNumber","maybeNumber","number","generalBoolean","maybeBoolean","mods","roomState","roomStateTags","followersOnlyAsNumber","_g","tag","helpers.generalString","helpers.generalNumber","helpers.generalBoolean","userState","badges","maybeBadges","parsed","badge","rawKey","camelCase","bits","color","emotes","maybeEmotes","emoteTag","emoteIndices","id","indices","map","index","start","end","emoteSets","maybeEmoteSets","userType","maybeUserType","mod","globalUserState","userNotice","noticeMessage","baseMessage","baseTags","msgId","toUpper","ROOM_MODS","helpers.mods","userStateMessage","USER_STATE","tagParsers.userState","userNoticeMessage","tagParsers.userNotice","systemMsg","systemMessage","parameters","param","constants.MESSAGE_PARAMETER_PREFIX_RE","exec","tagParsers.userNoticeMessageParameters","ANON_GIFT_PAID_UPGRADE","GIFT_PAID_UPGRADE","RAID","RESUBSCRIPTION","RITUAL","SUBSCRIPTION_GIFT_COMMUNITY","SUBSCRIPTION_GIFT","SUBSCRIPTION","toLowerCase","chatOptions","connectionTimeout","joinTimeout","onAuthenticationFailure","isFunction","sanitizers.channel","Error","defineProperty","CustomError","TwitchJSError","ApiReadyStates","WAITING","connectProfiler","_readyState","CONNECTING","_connectionAttempts","_client","removeAllListeners","once","_internalEmitter","constants.DISCONNECT","constants.RECONNECT","_handleClientAuthenticationFailure","globalUserStateMessage","tagParsers.globalUserState","_globalUserState","_isAuthenticated","_handleJoinsAfterConnect","constants.CONNECTED","on","_handleClientMessage","DISCONNECTING","_clearChannelState","constants.DISCONNECTED","RECONNECTING","constants.CONNECT","originError","reAuthenticationError_1","authenticationError","Errors.AuthenticationError","validators.chatOptions","_handleConnect","_handleDisconnect","_handleReconnect","Chat","_connectionInProgress","pEvent","rejectionEvents","timeout","Errors.ChatError","cancel","_disconnectionInProgress","catch","_reconnectionInProgress","validators.channel","joinProfiler","all","ROOM_STATE","JOIN","channelState","_setChannelState","_removeChannelState","PART","isCommand","_channelState","resolver","PRIVATE_MESSAGE","_getChannels","say","BAN","BAN_SUCCESS","ALREADY_BANNED","BLOCK","targetMessageId","DELETE","CLEAR","CLEAR_CHAT","COLOR","COLOR_CHANGED","COMMERCIAL","COMMERCIAL_SUCCESS","EMOTE_ONLY","EMOTE_ONLY_ON","ALREADY_EMOTE_ONLY_ON","EMOTE_ONLY_OFF","ALREADY_EMOTE_ONLY_OFF","period","FOLLOWERS_ONLY","FOLLOWERS_ONZERO","FOLLOWERS_ON","FOLLOWERS_ONLY_OFF","FOLLOWERS_OFF","HELP","CMDS_AVAILABLE","hostChannel","HOST","HOST_ON","description","MARKER","slice","text","ME","MOD","MOD_SUCCESS","MODS","R9K","R9K_ON","ALREADY_R9K_ON","R9K_OFF","ALREADY_R9K_OFF","raidChannel","seconds","SLOW","SLOW_ON","SLOW_OFF","SUBSCRIBERS","SUBS_ON","ALREADY_SUBS_ON","SUBSCRIBERS_OFF","SUBS_OFF","ALREADY_SUBS_OFF","timeoutArg","TIMEOUT","TIMEOUT_SUCCESS","UNBAN","UNBAN_SUCCESS","UNBLOCK","UNHOST","HOST_OFF","UNMOD","UNMOD_SUCCESS","UNRAID","UNRAID_SUCCESS","UNVIP","VIP","VIPS","WHISPER","_parseMessageForEmitter","_emit","clientMessageError","JSON","stringify","channels","joinsError_1","state","channelStates","baseEventName","parsers.joinMessage","parsers.partMessage","NAMES","namesV","usernames","parsers.namesMessage","NAMES_END","parsers.namesEndMessage","banReason","banDuration","USER_BANNED","parsers.clearChatMessage","CLEAR_MESSAGE","targetMsgId","parsers.clearMessageMessage","HOST_TARGET","numberOfViewers","isStopped","toNumber","parsers.hostTargetMessage","MODE","mode","baseModeMessage","MOD_GAINED","MOD_LOST","parsers.modeMessage","_getChannelState","parsers.userStateMessage","tagParsers.roomState","parsers.roomStateMessage","parsers.noticeMessage","parsers.userNoticeMessage","gt","CHEER","constants.PRIVATE_MESSAGE_HOSTED_RE","isHostingPrivateMessage","isAuto","HOSTED_AUTO","HOSTED_WITH_VIEWERS","HOSTED_WITHOUT_VIEWERS","parsers.privateMessage","uniq","filter","part","parents","eventParts","eventCompound","emitError","stack","fetchUtil","url","qsOptions","search","bodyParams","rest","queryParams","addQueryPrefix","arrayFormat","jsonInit","getJsonInit","init","headers","fetch","response","json","camelCaseKeys","deep","FetchError","ok","statusText","status","input","err","apiOptions","clientId","cb","isUndefined","READY","validators.apiOptions","Api","_status","newOptions","Authorization","INITIALIZED","scopes","includes","endpoint","_handleFetch","method","maybeUrl","baseUrl","fetchProfiler","performRequest","authenticationHeaders","_getAuthenticationHeaders","fetchOptions","error_2","AuthenticationError","error_1","_handleAuthenticationFailure","updateOptions","caughtError","error_3","chat","api","TwitchJs"],"mappings":"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K,GAAIlD,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CkD,EAAKA,EAAGG,OAAOP,EAAO5C,UAAUF,KACpC,OAAOkD,CACX,ECrIA,SAAY/D,GACVA,wBACAA,gCACAA,mCACD,CAJD,CAAYA,IAAAA,OASZ,SAAYC,GACVA,cACAA,cACAA,cACAA,cACAA,iBACD,CAND,CAAYA,IAAAA,OAWZ,SAAYC,GACVA,yBACAA,oCACAA,4BACAA,yBACAA,2BACAA,wBACD,CAPD,CAAYA,IAAAA,OASZ,SAAYC,GACVA,gBACAA,cACAA,cACAA,mBACD,CALD,CAAYA,IAAAA,OAUZ,SAAYC,GACVA,yBACAA,2BACAA,2BACAA,kBACAA,wBACAA,yBACAA,2BACAA,wBACD,CATD,CAAYA,IAAAA,OAWZ,SAAYC,GACVA,gBAEAA,cACAA,cACAA,wBAEAA,yBAEAA,cACAA,cACAA,cACAA,cACAA,kBAEAA,yBACAA,2BACAA,oCACAA,2BACAA,kBACAA,4BACAA,yBACAA,2BACAA,wBACD,CAxBD,CAAYA,IAAAA,OA0BZ,SAAYC,GACVA,YAEAA,UACAA,wBACAA,8BACAA,wBACAA,gCACAA,gDACAA,oCACAA,wCACAA,oDAEAA,kDACAA,wCACAA,cACAA,kCACAA,kBACAA,8BACAA,wCACAA,4DAEAA,wBACAA,0BACAA,sBAEAA,4BAEAA,gBAEAA,oBACAA,sBAEAA,kBACAA,kDACAA,4CACAA,2BACD,CArCD,CAAYA,IAAAA,OA0CZ,SAAYC,GACVA,YACAA,gBACAA,gBACAA,gBACAA,0BAEAA,kBACAA,yBACAA,gCACAA,6BACAA,oCACAA,cACAA,cACAA,kBACAA,UACAA,YACAA,cAEAA,gBACAA,uBACAA,cACAA,cACAA,qBACAA,4BACAA,mCACAA,oBACAA,gBACAA,oBACAA,kBACAA,gBACAA,kBACAA,gBACAA,YACAA,cACAA,aACD,CApCD,CAAYA,IAAAA,OAsCZ,SAAYC,GACVA,kCACAA,kDACAA,gDACAA,oCACAA,kCACAA,sCACAA,oCACAA,sCACAA,4BACAA,4BACAA,sCACAA,gCACAA,kCACAA,0C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"}